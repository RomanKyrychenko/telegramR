% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_stories.R
\name{CreateAlbumRequest}
\alias{CreateAlbumRequest}
\title{CreateAlbumRequest R6 class}
\description{
Request to create a story album for a given peer with a title and list of story ids.
Returns StoryAlbum.
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{CreateAlbumRequest}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CreateAlbumRequest-new}{\code{CreateAlbumRequest$new()}}
\item \href{#method-CreateAlbumRequest-resolve}{\code{CreateAlbumRequest$resolve()}}
\item \href{#method-CreateAlbumRequest-to_list}{\code{CreateAlbumRequest$to_list()}}
\item \href{#method-CreateAlbumRequest-to_bytes}{\code{CreateAlbumRequest$to_bytes()}}
\item \href{#method-CreateAlbumRequest-clone}{\code{CreateAlbumRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateAlbumRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-CreateAlbumRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CreateAlbumRequest$new(peer, title, stories)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{TypeInputPeer}

\item{\code{title}}{character}

\item{\code{stories}}{integer vector}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisible self
Resolve peer references

Convert high-level peer reference to an input peer using client/utils.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateAlbumRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-CreateAlbumRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CreateAlbumRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{client with get_input_entity}

\item{\code{utils}}{utils with get_input_peer
Convert to list}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateAlbumRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-CreateAlbumRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CreateAlbumRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list
Serialize to raw TL bytes
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateAlbumRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-CreateAlbumRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CreateAlbumRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw
Read a CreateAlbumRequest instance from a reader

reader expected to implement: tgread_object(), tgread_string(), read_int()
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CreateAlbumRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CreateAlbumRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CreateAlbumRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
