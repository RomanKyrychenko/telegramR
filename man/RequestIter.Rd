% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/requestiter.R
\name{RequestIter}
\alias{RequestIter}
\title{RequestIter}
\description{
Helper class to deal with requests that need offsets to iterate.
Provides facilities such as sleeping between requests and handling limits.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{client}}{The client instance used for making requests.}

\item{\code{reverse}}{Whether to reverse the iteration order.}

\item{\code{wait_time}}{Time to wait between requests (in seconds).}

\item{\code{kwargs}}{Additional arguments passed to the iterator.}

\item{\code{limit}}{The total number of items to return (default is Inf).}

\item{\code{left}}{The number of items left to fetch.}

\item{\code{buffer}}{A temporary storage for fetched items.}

\item{\code{index}}{The current index in the buffer.}

\item{\code{total}}{The total number of items fetched (if applicable).}

\item{\code{last_load}}{The timestamp of the last data load.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RequestIter-new}{\code{RequestIter$new()}}
\item \href{#method-RequestIter-async_init}{\code{RequestIter$async_init()}}
\item \href{#method-RequestIter-load_next_chunk}{\code{RequestIter$load_next_chunk()}}
\item \href{#method-RequestIter-collect}{\code{RequestIter$collect()}}
\item \href{#method-RequestIter-.next}{\code{RequestIter$.next()}}
\item \href{#method-RequestIter-reset}{\code{RequestIter$reset()}}
\item \href{#method-RequestIter-clone}{\code{RequestIter$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RequestIter-new"></a>}}
\if{latex}{\out{\hypertarget{method-RequestIter-new}{}}}
\subsection{Method \code{new()}}{
Initializes the RequestIter object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RequestIter$new(client, limit = Inf, reverse = FALSE, wait_time = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{The client instance.}

\item{\code{limit}}{The total number of items to return (default is Inf).}

\item{\code{reverse}}{Whether to reverse the iteration order (default is FALSE).}

\item{\code{wait_time}}{Time to wait between requests (in seconds, default is NULL).}

\item{\code{...}}{Additional arguments passed to the iterator.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RequestIter-async_init"></a>}}
\if{latex}{\out{\hypertarget{method-RequestIter-async_init}{}}}
\subsection{Method \code{async_init()}}{
Asynchronous initialization (to be overridden by subclasses).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RequestIter$async_init(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Additional arguments passed to the initialization.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if this is the last iteration, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RequestIter-load_next_chunk"></a>}}
\if{latex}{\out{\hypertarget{method-RequestIter-load_next_chunk}{}}}
\subsection{Method \code{load_next_chunk()}}{
Loads the next chunk of data (to be overridden by subclasses).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RequestIter$load_next_chunk()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE if this is the last chunk, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RequestIter-collect"></a>}}
\if{latex}{\out{\hypertarget{method-RequestIter-collect}{}}}
\subsection{Method \code{collect()}}{
Collects all items into a list asynchronously.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RequestIter$collect()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of all items collected.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RequestIter-.next"></a>}}
\if{latex}{\out{\hypertarget{method-RequestIter-.next}{}}}
\subsection{Method \code{.next()}}{
Returns the next item in the iteration asynchronously.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RequestIter$.next()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The next item in the iteration.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RequestIter-reset"></a>}}
\if{latex}{\out{\hypertarget{method-RequestIter-reset}{}}}
\subsection{Method \code{reset()}}{
Resets the iterator to its initial state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RequestIter$reset()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RequestIter-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RequestIter-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RequestIter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
