% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_stories.R
\docType{class}
\name{UpdateAlbumRequest}
\alias{UpdateAlbumRequest}
\title{UpdateAlbumRequest R6 class}
\format{
An R6 object inheriting from TLRequest (if available)
}
\usage{
UpdateAlbumRequest$new(peer, album_id, title = NULL, delete_stories = NULL, add_stories = NULL, order = NULL)
}
\description{
Represents a TL request to update a story album.
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{UpdateAlbumRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{peer}}{TypeInputPeer input peer}

\item{\code{album_id}}{integer album identifier}

\item{\code{title}}{character or NULL new title}

\item{\code{delete_stories}}{integer vector or NULL stories to delete}

\item{\code{add_stories}}{integer vector or NULL stories to add}

\item{\code{order}}{integer vector or NULL new order of stories}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-UpdateAlbumRequest-new}{\code{UpdateAlbumRequest$new()}}
\item \href{#method-UpdateAlbumRequest-resolve}{\code{UpdateAlbumRequest$resolve()}}
\item \href{#method-UpdateAlbumRequest-to_list}{\code{UpdateAlbumRequest$to_list()}}
\item \href{#method-UpdateAlbumRequest-to_bytes}{\code{UpdateAlbumRequest$to_bytes()}}
\item \href{#method-UpdateAlbumRequest-clone}{\code{UpdateAlbumRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateAlbumRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateAlbumRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateAlbumRequest$new(
  peer,
  album_id,
  title = NULL,
  delete_stories = NULL,
  add_stories = NULL,
  order = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{TypeInputPeer}

\item{\code{album_id}}{integer}

\item{\code{title}}{character or NULL}

\item{\code{delete_stories}}{integer vector or NULL}

\item{\code{add_stories}}{integer vector or NULL}

\item{\code{order}}{integer vector or NULL
Resolve peer references

Convert high-level peer references to input peers using provided client/utils.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateAlbumRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateAlbumRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateAlbumRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{client object with get_input_entity method}

\item{\code{utils}}{utils object with get_input_peer method
Convert to list (similar to to_dict)

Prepare a pure R list representation suitable for inspection or JSON.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateAlbumRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateAlbumRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateAlbumRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list
Serialize to raw bytes

This produces a raw vector intended to match the TL binary layout used in the original implementation.
It expects helper serialization methods available on the peer object (peer$to_bytes / peer$bytes),
and a serialize_bytes(self, string) method on the TLRequest base or in scope.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateAlbumRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateAlbumRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateAlbumRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw
Class-level constructor id (read-only)
Subclass id (read-only)
Read an UpdateAlbumRequest instance from a reader

reader is expected to implement: read_int(), tgread_object(), tgread_string()
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateAlbumRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateAlbumRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateAlbumRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
