% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_users.R
\name{GetFullUserRequest}
\alias{GetFullUserRequest}
\title{GetFullUserRequest}
\description{
GetFullUserRequest

GetFullUserRequest
}
\details{
An R6 class representing a request to get full information about a user.
This class inherits from TLRequest and is used to construct and serialize
Telegram API requests for retrieving detailed user data.
}
\examples{
# Example usage (assuming client and utils are set up)
request <- GetFullUserRequest$new(id = some_user_id)
request$resolve(client, utils)
dict <- request$to_dict()
bytes <- request$.bytes()

}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{GetFullUserRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{The constructor ID for this request (0xb60f5918).}

\item{\code{SUBCLASS_OF_ID}}{The subclass ID (0x83df9df5).}

\item{\code{id}}{The user identifier, which can be a TLInputUser object or a
representation accepted by get_input_user. This field is resolved
during the request preparation.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GetFullUserRequest-new}{\code{GetFullUserRequest$new()}}
\item \href{#method-GetFullUserRequest-resolve}{\code{GetFullUserRequest$resolve()}}
\item \href{#method-GetFullUserRequest-to_dict}{\code{GetFullUserRequest$to_dict()}}
\item \href{#method-GetFullUserRequest-.bytes}{\code{GetFullUserRequest$.bytes()}}
\item \href{#method-GetFullUserRequest-from_reader}{\code{GetFullUserRequest$from_reader()}}
\item \href{#method-GetFullUserRequest-clone}{\code{GetFullUserRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetFullUserRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-GetFullUserRequest-new}{}}}
\subsection{Method \code{new()}}{
Request to get full information about a user.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetFullUserRequest$new(id = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{TLInputUser or a representation accepted by utils$get_input_user}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetFullUserRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-GetFullUserRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
Resolves the id field using the provided client and utils.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetFullUserRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{A client object to resolve user references.}

\item{\code{utils}}{A utils object with methods to get input user representations.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetFullUserRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-GetFullUserRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
Converts the GetFullUserRequest to a dictionary (list).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetFullUserRequest$to_dict()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list representation of the GetFullUserRequest.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetFullUserRequest-.bytes"></a>}}
\if{latex}{\out{\hypertarget{method-GetFullUserRequest-.bytes}{}}}
\subsection{Method \code{.bytes()}}{
Converts the GetFullUserRequest to raw bytes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetFullUserRequest$.bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A raw vector representing the GetFullUserRequest.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetFullUserRequest-from_reader"></a>}}
\if{latex}{\out{\hypertarget{method-GetFullUserRequest-from_reader}{}}}
\subsection{Method \code{from_reader()}}{
Creates a GetFullUserRequest from a reader object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetFullUserRequest$from_reader(reader)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reader}}{A reader object to read the response.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of GetFullUserRequest.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetFullUserRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GetFullUserRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetFullUserRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
