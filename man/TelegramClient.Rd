% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/telegramclient.R
\name{TelegramClient}
\alias{TelegramClient}
\title{TelegramClient Class}
\description{
TelegramClient Class

TelegramClient Class
}
\details{
An R6 class that combines functionality from multiple method classes to interact with Telegram API
}
\examples{

## ------------------------------------------------
## Method `TelegramClient$iter_participants`
## ------------------------------------------------

# Show all user IDs in a chat
iter <- client$iter_participants(chat)
for (user in iter) {
  print(user$id)
}

# Search by name
iter <- client$iter_participants(chat, search = 'name')
for (user in iter) {
  print(user$username)
}

# Filter by admins
filter <- ChannelParticipantsAdmins()
iter <- client$iter_participants(chat, filter = filter)
for (user in iter) {
  print(user$first_name)
}

## ------------------------------------------------
## Method `TelegramClient$get_participants`
## ------------------------------------------------

users <- client$get_participants(chat)
print(users[[1]]$first_name)

for (user in users) {
  if (!is.null(user$username)) {
    print(user$username)
  }
}

## ------------------------------------------------
## Method `TelegramClient$iter_admin_log`
## ------------------------------------------------

iter <- client$iter_admin_log(channel)
for (event in iter) {
  if (event$changed_title) {
    print(paste('The title changed from', event$old, 'to', event$new))
  }
}

## ------------------------------------------------
## Method `TelegramClient$get_admin_log`
## ------------------------------------------------

# Get a list of deleted message events which said "heck"
events <- client$get_admin_log(channel, search = 'heck', delete = TRUE)
print(events[[1]]$old)

## ------------------------------------------------
## Method `TelegramClient$iter_profile_photos`
## ------------------------------------------------

# Download all the profile photos of some user
iter <- client$iter_profile_photos(user)
for (photo in iter) {
  client$download_media(photo)
}

## ------------------------------------------------
## Method `TelegramClient$get_profile_photos`
## ------------------------------------------------

# Get the photos of a channel
photos <- client$get_profile_photos(channel)
client$download_media(photos[[length(photos)]])

## ------------------------------------------------
## Method `TelegramClient$action`
## ------------------------------------------------

# Type for 2 seconds, then send a message
action <- client$action(chat, 'typing')
Sys.sleep(2)
client$send_message(chat, 'Hello world! I type slow ^^')

# Cancel any previous action
client$action(chat, 'cancel')

# Upload a document, showing its progress
action <- client$action(chat, 'document')
client$send_file(chat, zip_file, progress_callback = action$progress)

## ------------------------------------------------
## Method `TelegramClient$edit_admin`
## ------------------------------------------------

# Allowing user to pin messages in chat
client$edit_admin(chat, user, pin_messages = TRUE)

# Granting all permissions except for add_admins
client$edit_admin(chat, user, is_admin = TRUE, add_admins = FALSE)

## ------------------------------------------------
## Method `TelegramClient$edit_permissions`
## ------------------------------------------------

# Banning user from chat forever
client$edit_permissions(chat, user, view_messages = FALSE)

# Kicking someone (ban + un-ban)
client$edit_permissions(chat, user, view_messages = FALSE)
client$edit_permissions(chat, user)

## ------------------------------------------------
## Method `TelegramClient$kick_participant`
## ------------------------------------------------

# Kick some user from some chat, and deleting the service message
msg <- client$kick_participant(chat, user)
msg$delete()

# Leaving chat
client$kick_participant(chat, 'me')

## ------------------------------------------------
## Method `TelegramClient$get_permissions`
## ------------------------------------------------

permissions <- client$get_permissions(chat, user)
if (permissions$is_admin) {
  # do something
}

# Get Banned Permissions of Chat
client$get_permissions(chat)

## ------------------------------------------------
## Method `TelegramClient$get_stats`
## ------------------------------------------------

channel <- -100123
stats <- client$get_stats(channel)
print(paste('Stats from', stats$period$min_date, 'to', stats$period$max_date, ':'))
print(stats$stringify())
}
\keyword{Internal}
\keyword{helper}
\keyword{internal}
\keyword{pin/unpin}
\section{Super class}{
\code{\link[telegramR:TelegramBaseClient]{telegramR::TelegramBaseClient}} -> \code{TelegramClient}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{parse_mode}}{The default parse mode for parsing messages.
Set the default parse mode.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TelegramClient-takeout}{\code{TelegramClient$takeout()}}
\item \href{#method-TelegramClient-end_takeout}{\code{TelegramClient$end_takeout()}}
\item \href{#method-TelegramClient-start}{\code{TelegramClient$start()}}
\item \href{#method-TelegramClient-sign_in}{\code{TelegramClient$sign_in()}}
\item \href{#method-TelegramClient-sign_up}{\code{TelegramClient$sign_up()}}
\item \href{#method-TelegramClient-send_code_request}{\code{TelegramClient$send_code_request()}}
\item \href{#method-TelegramClient-qr_login}{\code{TelegramClient$qr_login()}}
\item \href{#method-TelegramClient-log_out}{\code{TelegramClient$log_out()}}
\item \href{#method-TelegramClient-edit_2fa}{\code{TelegramClient$edit_2fa()}}
\item \href{#method-TelegramClient-parse_phone_and_hash}{\code{TelegramClient$parse_phone_and_hash()}}
\item \href{#method-TelegramClient-on_login}{\code{TelegramClient$on_login()}}
\item \href{#method-TelegramClient-start_impl}{\code{TelegramClient$start_impl()}}
\item \href{#method-TelegramClient-parse_phone}{\code{TelegramClient$parse_phone()}}
\item \href{#method-TelegramClient-compute_check}{\code{TelegramClient$compute_check()}}
\item \href{#method-TelegramClient-compute_digest}{\code{TelegramClient$compute_digest()}}
\item \href{#method-TelegramClient-get_display_name}{\code{TelegramClient$get_display_name()}}
\item \href{#method-TelegramClient-download_profile_photo}{\code{TelegramClient$download_profile_photo()}}
\item \href{#method-TelegramClient-download_media}{\code{TelegramClient$download_media()}}
\item \href{#method-TelegramClient-download_file}{\code{TelegramClient$download_file()}}
\item \href{#method-TelegramClient-.download_file}{\code{TelegramClient$.download_file()}}
\item \href{#method-TelegramClient-iter_download}{\code{TelegramClient$iter_download()}}
\item \href{#method-TelegramClient-.iter_download}{\code{TelegramClient$.iter_download()}}
\item \href{#method-TelegramClient-get_thumb}{\code{TelegramClient$get_thumb()}}
\item \href{#method-TelegramClient-download_cached_photo_size}{\code{TelegramClient$download_cached_photo_size()}}
\item \href{#method-TelegramClient-download_photo}{\code{TelegramClient$download_photo()}}
\item \href{#method-TelegramClient-get_kind_and_names}{\code{TelegramClient$get_kind_and_names()}}
\item \href{#method-TelegramClient-download_document}{\code{TelegramClient$download_document()}}
\item \href{#method-TelegramClient-download_contact}{\code{TelegramClient$download_contact()}}
\item \href{#method-TelegramClient-download_web_document}{\code{TelegramClient$download_web_document()}}
\item \href{#method-TelegramClient-get_proper_filename}{\code{TelegramClient$get_proper_filename()}}
\item \href{#method-TelegramClient-iter_dialogs}{\code{TelegramClient$iter_dialogs()}}
\item \href{#method-TelegramClient-get_dialogs}{\code{TelegramClient$get_dialogs()}}
\item \href{#method-TelegramClient-iter_drafts}{\code{TelegramClient$iter_drafts()}}
\item \href{#method-TelegramClient-get_drafts}{\code{TelegramClient$get_drafts()}}
\item \href{#method-TelegramClient-edit_folder}{\code{TelegramClient$edit_folder()}}
\item \href{#method-TelegramClient-delete_dialog}{\code{TelegramClient$delete_dialog()}}
\item \href{#method-TelegramClient-conversation}{\code{TelegramClient$conversation()}}
\item \href{#method-TelegramClient-iter_participants}{\code{TelegramClient$iter_participants()}}
\item \href{#method-TelegramClient-get_participants}{\code{TelegramClient$get_participants()}}
\item \href{#method-TelegramClient-iter_admin_log}{\code{TelegramClient$iter_admin_log()}}
\item \href{#method-TelegramClient-get_admin_log}{\code{TelegramClient$get_admin_log()}}
\item \href{#method-TelegramClient-iter_profile_photos}{\code{TelegramClient$iter_profile_photos()}}
\item \href{#method-TelegramClient-get_profile_photos}{\code{TelegramClient$get_profile_photos()}}
\item \href{#method-TelegramClient-action}{\code{TelegramClient$action()}}
\item \href{#method-TelegramClient-edit_admin}{\code{TelegramClient$edit_admin()}}
\item \href{#method-TelegramClient-edit_permissions}{\code{TelegramClient$edit_permissions()}}
\item \href{#method-TelegramClient-kick_participant}{\code{TelegramClient$kick_participant()}}
\item \href{#method-TelegramClient-get_permissions}{\code{TelegramClient$get_permissions()}}
\item \href{#method-TelegramClient-get_stats}{\code{TelegramClient$get_stats()}}
\item \href{#method-TelegramClient-inline_query}{\code{TelegramClient$inline_query()}}
\item \href{#method-TelegramClient-invoke_function}{\code{TelegramClient$invoke_function()}}
\item \href{#method-TelegramClient-custom_inline_results}{\code{TelegramClient$custom_inline_results()}}
\item \href{#method-TelegramClient-iter_messages}{\code{TelegramClient$iter_messages()}}
\item \href{#method-TelegramClient-get_messages}{\code{TelegramClient$get_messages()}}
\item \href{#method-TelegramClient-send_message}{\code{TelegramClient$send_message()}}
\item \href{#method-TelegramClient-forward_messages}{\code{TelegramClient$forward_messages()}}
\item \href{#method-TelegramClient-edit_message}{\code{TelegramClient$edit_message()}}
\item \href{#method-TelegramClient-delete_messages}{\code{TelegramClient$delete_messages()}}
\item \href{#method-TelegramClient-send_read_acknowledge}{\code{TelegramClient$send_read_acknowledge()}}
\item \href{#method-TelegramClient-pin_message}{\code{TelegramClient$pin_message()}}
\item \href{#method-TelegramClient-unpin_message}{\code{TelegramClient$unpin_message()}}
\item \href{#method-TelegramClient-get_comment_data}{\code{TelegramClient$get_comment_data()}}
\item \href{#method-TelegramClient-pin_internal}{\code{TelegramClient$pin_internal()}}
\item \href{#method-TelegramClient-send_file}{\code{TelegramClient$send_file()}}
\item \href{#method-TelegramClient-upload_file}{\code{TelegramClient$upload_file()}}
\item \href{#method-TelegramClient-file_to_media}{\code{TelegramClient$file_to_media()}}
\item \href{#method-TelegramClient-resize_photo_if_needed}{\code{TelegramClient$resize_photo_if_needed()}}
\item \href{#method-TelegramClient-is_image}{\code{TelegramClient$is_image()}}
\item \href{#method-TelegramClient-get_appropriated_part_size}{\code{TelegramClient$get_appropriated_part_size()}}
\item \href{#method-TelegramClient-invoke}{\code{TelegramClient$invoke()}}
\item \href{#method-TelegramClient-build_reply_markup}{\code{TelegramClient$build_reply_markup()}}
\item \href{#method-TelegramClient-run_until_disconnected}{\code{TelegramClient$run_until_disconnected()}}
\item \href{#method-TelegramClient-set_receive_updates}{\code{TelegramClient$set_receive_updates()}}
\item \href{#method-TelegramClient-on}{\code{TelegramClient$on()}}
\item \href{#method-TelegramClient-add_event_handler}{\code{TelegramClient$add_event_handler()}}
\item \href{#method-TelegramClient-remove_event_handler}{\code{TelegramClient$remove_event_handler()}}
\item \href{#method-TelegramClient-list_event_handlers}{\code{TelegramClient$list_event_handlers()}}
\item \href{#method-TelegramClient-catch_up}{\code{TelegramClient$catch_up()}}
\item \href{#method-TelegramClient-update_loop}{\code{TelegramClient$update_loop()}}
\item \href{#method-TelegramClient-preprocess_updates}{\code{TelegramClient$preprocess_updates()}}
\item \href{#method-TelegramClient-keepalive_loop}{\code{TelegramClient$keepalive_loop()}}
\item \href{#method-TelegramClient-dispatch_update}{\code{TelegramClient$dispatch_update()}}
\item \href{#method-TelegramClient-handle_auto_reconnect}{\code{TelegramClient$handle_auto_reconnect()}}
\item \href{#method-TelegramClient-set_parse_mode}{\code{TelegramClient$set_parse_mode()}}
\item \href{#method-TelegramClient-get_parse_mode}{\code{TelegramClient$get_parse_mode()}}
\item \href{#method-TelegramClient-sanitize_parse_mode}{\code{TelegramClient$sanitize_parse_mode()}}
\item \href{#method-TelegramClient-parse_message_text}{\code{TelegramClient$parse_message_text()}}
\item \href{#method-TelegramClient-replace_with_mention}{\code{TelegramClient$replace_with_mention()}}
\item \href{#method-TelegramClient-get_response_message}{\code{TelegramClient$get_response_message()}}
\item \href{#method-TelegramClient-call}{\code{TelegramClient$call()}}
\item \href{#method-TelegramClient-call_internal}{\code{TelegramClient$call_internal()}}
\item \href{#method-TelegramClient-get_me}{\code{TelegramClient$get_me()}}
\item \href{#method-TelegramClient-self_id}{\code{TelegramClient$self_id()}}
\item \href{#method-TelegramClient-is_bot}{\code{TelegramClient$is_bot()}}
\item \href{#method-TelegramClient-is_user_authorized}{\code{TelegramClient$is_user_authorized()}}
\item \href{#method-TelegramClient-get_entity}{\code{TelegramClient$get_entity()}}
\item \href{#method-TelegramClient-get_input_entity}{\code{TelegramClient$get_input_entity()}}
\item \href{#method-TelegramClient-get_peer}{\code{TelegramClient$get_peer()}}
\item \href{#method-TelegramClient-get_peer_id}{\code{TelegramClient$get_peer_id()}}
\item \href{#method-TelegramClient-get_entity_from_string}{\code{TelegramClient$get_entity_from_string()}}
\item \href{#method-TelegramClient-get_input_dialog}{\code{TelegramClient$get_input_dialog()}}
\item \href{#method-TelegramClient-get_input_notify}{\code{TelegramClient$get_input_notify()}}
\item \href{#method-TelegramClient-new}{\code{TelegramClient$new()}}
\item \href{#method-TelegramClient-clone}{\code{TelegramClient$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TelegramBaseClient" data-id="connect"><a href='../../telegramR/html/TelegramBaseClient.html#method-TelegramBaseClient-connect'><code>telegramR::TelegramBaseClient$connect()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TelegramBaseClient" data-id="disconnect"><a href='../../telegramR/html/TelegramBaseClient.html#method-TelegramBaseClient-disconnect'><code>telegramR::TelegramBaseClient$disconnect()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TelegramBaseClient" data-id="get_flood_sleep_threshold"><a href='../../telegramR/html/TelegramBaseClient.html#method-TelegramBaseClient-get_flood_sleep_threshold'><code>telegramR::TelegramBaseClient$get_flood_sleep_threshold()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TelegramBaseClient" data-id="get_proxy"><a href='../../telegramR/html/TelegramBaseClient.html#method-TelegramBaseClient-get_proxy'><code>telegramR::TelegramBaseClient$get_proxy()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TelegramBaseClient" data-id="get_version"><a href='../../telegramR/html/TelegramBaseClient.html#method-TelegramBaseClient-get_version'><code>telegramR::TelegramBaseClient$get_version()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TelegramBaseClient" data-id="is_connected"><a href='../../telegramR/html/TelegramBaseClient.html#method-TelegramBaseClient-is_connected'><code>telegramR::TelegramBaseClient$is_connected()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TelegramBaseClient" data-id="set_flood_sleep_threshold"><a href='../../telegramR/html/TelegramBaseClient.html#method-TelegramBaseClient-set_flood_sleep_threshold'><code>telegramR::TelegramBaseClient$set_flood_sleep_threshold()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TelegramBaseClient" data-id="set_proxy"><a href='../../telegramR/html/TelegramBaseClient.html#method-TelegramBaseClient-set_proxy'><code>telegramR::TelegramBaseClient$set_proxy()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-takeout"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-takeout}{}}}
\subsection{Method \code{takeout()}}{
Initialize a new `AccountMethods` object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$takeout(
  finalize = TRUE,
  contacts = NULL,
  users = NULL,
  chats = NULL,
  megagroups = NULL,
  channels = NULL,
  files = NULL,
  max_file_size = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{finalize}}{A logical indicating whether to finalize the takeout session.}

\item{\code{contacts}}{A logical indicating whether to include contacts in the takeout session.}

\item{\code{users}}{A logical indicating whether to include users in the takeout session.}

\item{\code{chats}}{A logical indicating whether to include chats in the takeout session.}

\item{\code{megagroups}}{A logical indicating whether to include megagroups in the takeout session.}

\item{\code{channels}}{A logical indicating whether to include channels in the takeout session.}

\item{\code{files}}{A logical indicating whether to include files in the takeout session.}

\item{\code{max_file_size}}{The maximum file size to include in the takeout session.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `AccountMethods` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-end_takeout"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-end_takeout}{}}}
\subsection{Method \code{end_takeout()}}{
Finalize the takeout session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$end_takeout(success)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{success}}{A logical indicating whether the takeout session was successful.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A logical indicating whether the takeout session was finalized successfully.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-start"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-start}{}}}
\subsection{Method \code{start()}}{
Starts the client (connects and logs in if necessary).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$start(
  phone = NULL,
  password = NULL,
  bot_token = NULL,
  force_sms = FALSE,
  code_callback = NULL,
  first_name = "New User",
  last_name = "",
  max_attempts = 3
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{phone}}{Function or string representing the phone number or bot token}

\item{\code{password}}{Function or string to provide 2FA password if needed}

\item{\code{bot_token}}{Bot token for logging in as a bot}

\item{\code{force_sms}}{Whether to force sending the code request as SMS}

\item{\code{code_callback}}{Function to retrieve login code}

\item{\code{first_name}}{First name for new accounts}

\item{\code{last_name}}{Last name for new accounts}

\item{\code{max_attempts}}{Maximum number of attempts for code/password verification}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The client instance
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-sign_in"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-sign_in}{}}}
\subsection{Method \code{sign_in()}}{
Signs in to an existing user or bot account.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$sign_in(
  phone = NULL,
  code = NULL,
  password = NULL,
  bot_token = NULL,
  phone_code_hash = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{phone}}{Phone number}

\item{\code{code}}{The verification code sent by Telegram}

\item{\code{password}}{2FA password if enabled}

\item{\code{bot_token}}{Bot token for logging in as a bot}

\item{\code{phone_code_hash}}{Hash returned by send_code_request}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The signed in user or information about send_code_request
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-sign_up"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-sign_up}{}}}
\subsection{Method \code{sign_up()}}{
This method can no longer be used due to Telegram's restrictions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$sign_up(
  code,
  first_name,
  last_name = "",
  phone = NULL,
  phone_code_hash = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{The verification code}

\item{\code{first_name}}{First name for the new user}

\item{\code{last_name}}{Last name for the new user}

\item{\code{phone}}{Phone number}

\item{\code{phone_code_hash}}{Hash returned by send_code_request}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-send_code_request"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-send_code_request}{}}}
\subsection{Method \code{send_code_request()}}{
Sends the verification code to the given phone number
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$send_code_request(phone, force_sms = FALSE, retry_count = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{phone}}{Phone number to send the code to}

\item{\code{force_sms}}{Whether to force sending as SMS}

\item{\code{retry_count}}{Internal parameter for recursion, do not set}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The sent code information
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-qr_login"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-qr_login}{}}}
\subsection{Method \code{qr_login()}}{
Initiates the QR login procedure
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$qr_login(ignored_ids = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ignored_ids}}{List of already logged-in user IDs}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
QR login object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-log_out"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-log_out}{}}}
\subsection{Method \code{log_out()}}{
Logs out of Telegram and deletes the current session file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$log_out()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE if successful, FALSE otherwise
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-edit_2fa"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-edit_2fa}{}}}
\subsection{Method \code{edit_2fa()}}{
Changes the 2FA settings of the logged in user
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$edit_2fa(
  current_password = NULL,
  new_password = NULL,
  hint = "",
  email = NULL,
  email_code_callback = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{current_password}}{Current password}

\item{\code{new_password}}{New password to set}

\item{\code{hint}}{Hint to display when prompting for 2FA}

\item{\code{email}}{Recovery email address}

\item{\code{email_code_callback}}{Function to retrieve email verification code}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if successful, FALSE otherwise
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-parse_phone_and_hash"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-parse_phone_and_hash}{}}}
\subsection{Method \code{parse_phone_and_hash()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$parse_phone_and_hash(phone, phone_hash)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-on_login"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-on_login}{}}}
\subsection{Method \code{on_login()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$on_login(user)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-start_impl"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-start_impl}{}}}
\subsection{Method \code{start_impl()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$start_impl(
  phone,
  password,
  bot_token,
  force_sms,
  code_callback,
  first_name,
  last_name,
  max_attempts
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-parse_phone"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-parse_phone}{}}}
\subsection{Method \code{parse_phone()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$parse_phone(phone)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-compute_check"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-compute_check}{}}}
\subsection{Method \code{compute_check()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$compute_check(pwd, password)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-compute_digest"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-compute_digest}{}}}
\subsection{Method \code{compute_digest()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$compute_digest(algo, password)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_display_name"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_display_name}{}}}
\subsection{Method \code{get_display_name()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_display_name(user)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-download_profile_photo"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-download_profile_photo}{}}}
\subsection{Method \code{download_profile_photo()}}{
Download a profile photo
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$download_profile_photo(entity, file = NULL, download_big = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity to download the profile photo from}

\item{\code{file}}{Output file path or NULL for auto-naming}

\item{\code{download_big}}{Whether to download the big version of the photo}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Path to the downloaded file or NULL if no photo
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-download_media"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-download_media}{}}}
\subsection{Method \code{download_media()}}{
Download media from a message
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$download_media(
  message,
  file = NULL,
  thumb = NULL,
  progress_callback = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message}}{The message or media to download}

\item{\code{file}}{Output file path or NULL for auto-naming}

\item{\code{thumb}}{Which thumbnail to download (if any)}

\item{\code{progress_callback}}{Function called with progress updates}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Path to the downloaded file or NULL if no media
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-download_file"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-download_file}{}}}
\subsection{Method \code{download_file()}}{
Download a file from its input location
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$download_file(
  input_location,
  file = NULL,
  part_size_kb = NULL,
  file_size = NULL,
  progress_callback = NULL,
  dc_id = NULL,
  key = NULL,
  iv = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_location}}{The file location}

\item{\code{file}}{Output file path or NULL for auto-naming}

\item{\code{part_size_kb}}{Chunk size when downloading files}

\item{\code{file_size}}{The file size if known}

\item{\code{progress_callback}}{Function called with progress updates}

\item{\code{dc_id}}{Data center ID}

\item{\code{key}}{Encryption key if needed}

\item{\code{iv}}{Encryption IV if needed}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Downloaded file data or path
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-.download_file"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-.download_file}{}}}
\subsection{Method \code{.download_file()}}{
Internal method to download a file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$.download_file(
  input_location,
  file = NULL,
  part_size_kb = NULL,
  file_size = NULL,
  progress_callback = NULL,
  dc_id = NULL,
  key = NULL,
  iv = NULL,
  msg_data = NULL,
  cdn_redirect = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_location}}{The file location}

\item{\code{file}}{Output file path or NULL for auto-naming}

\item{\code{part_size_kb}}{Chunk size when downloading files}

\item{\code{file_size}}{The file size if known}

\item{\code{progress_callback}}{Function called with progress updates}

\item{\code{dc_id}}{Data center ID}

\item{\code{key}}{Encryption key if needed}

\item{\code{iv}}{Encryption IV if needed}

\item{\code{msg_data}}{Message data if applicable}

\item{\code{cdn_redirect}}{CDN redirect if applicable}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Downloaded file data or path
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-iter_download"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-iter_download}{}}}
\subsection{Method \code{iter_download()}}{
Iterate over a file download
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$iter_download(
  file,
  offset = 0,
  stride = NULL,
  limit = NULL,
  chunk_size = NULL,
  request_size = MAX_CHUNK_SIZE,
  file_size = NULL,
  dc_id = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to download}

\item{\code{offset}}{Starting offset}

\item{\code{stride}}{Stride between chunks}

\item{\code{limit}}{Maximum number of chunks to download}

\item{\code{chunk_size}}{Size of each chunk}

\item{\code{request_size}}{Size of each request}

\item{\code{file_size}}{Total file size if known}

\item{\code{dc_id}}{Data center ID}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Iterator for file chunks
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-.iter_download"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-.iter_download}{}}}
\subsection{Method \code{.iter_download()}}{
Internal implementation of iter_download
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$.iter_download(
  file,
  offset = 0,
  stride = NULL,
  limit = NULL,
  chunk_size = NULL,
  request_size = MAX_CHUNK_SIZE,
  file_size = NULL,
  dc_id = NULL,
  msg_data = NULL,
  cdn_redirect = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to download}

\item{\code{offset}}{Starting offset}

\item{\code{stride}}{Stride between chunks}

\item{\code{limit}}{Maximum number of chunks to download}

\item{\code{chunk_size}}{Size of each chunk}

\item{\code{request_size}}{Size of each request}

\item{\code{file_size}}{Total file size if known}

\item{\code{dc_id}}{Data center ID}

\item{\code{msg_data}}{Message data if applicable}

\item{\code{cdn_redirect}}{CDN redirect if applicable}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Iterator for file chunks
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_thumb"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_thumb}{}}}
\subsection{Method \code{get_thumb()}}{
Get the appropriate thumbnail from thumbs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_thumb(thumbs, thumb)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{thumbs}}{List of available thumbnails}

\item{\code{thumb}}{Which thumbnail to get (NULL for largest, integer index,
string type, or PhotoSize/VideoSize object)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The selected thumbnail or NULL if none found
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-download_cached_photo_size"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-download_cached_photo_size}{}}}
\subsection{Method \code{download_cached_photo_size()}}{
Download cached photo size
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$download_cached_photo_size(size, file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{size}}{The photo size to download}

\item{\code{file}}{Output file path or NULL for auto-naming}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Downloaded file data or path
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-download_photo"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-download_photo}{}}}
\subsection{Method \code{download_photo()}}{
Download a photo
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$download_photo(photo, file, date, thumb, progress_callback)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{photo}}{The photo to download}

\item{\code{file}}{Output file path or NULL for auto-naming}

\item{\code{date}}{The date the photo was sent}

\item{\code{thumb}}{Which thumbnail to download}

\item{\code{progress_callback}}{Function called with progress updates}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Path to the downloaded file
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_kind_and_names"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_kind_and_names}{}}}
\subsection{Method \code{get_kind_and_names()}}{
Get kind and possible names for DocumentAttribute
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_kind_and_names(attributes)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{attributes}}{The document attributes}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List with kind and possible names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-download_document"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-download_document}{}}}
\subsection{Method \code{download_document()}}{
Download a document
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$download_document(
  document,
  file,
  date,
  thumb,
  progress_callback,
  msg_data
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{document}}{The document to download}

\item{\code{file}}{Output file path or NULL for auto-naming}

\item{\code{date}}{The date the document was sent}

\item{\code{thumb}}{Which thumbnail to download}

\item{\code{progress_callback}}{Function called with progress updates}

\item{\code{msg_data}}{Message data for reference if needed}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Path to the downloaded file
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-download_contact"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-download_contact}{}}}
\subsection{Method \code{download_contact()}}{
Download a contact as vCard
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$download_contact(mm_contact, file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mm_contact}}{The contact to download}

\item{\code{file}}{Output file path or NULL for auto-naming}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Path to the downloaded file
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-download_web_document"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-download_web_document}{}}}
\subsection{Method \code{download_web_document()}}{
Download a web document
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$download_web_document(web, file, progress_callback)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{web}}{The web document to download}

\item{\code{file}}{Output file path or NULL for auto-naming}

\item{\code{progress_callback}}{Function called with progress updates}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Path to the downloaded file
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_proper_filename"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_proper_filename}{}}}
\subsection{Method \code{get_proper_filename()}}{
Get a proper filename for the download
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_proper_filename(
  file,
  kind,
  extension,
  date = NULL,
  possible_names = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file path or NULL for auto-naming}

\item{\code{kind}}{The kind of file (photo, document, etc.)}

\item{\code{extension}}{The file extension}

\item{\code{date}}{The date the file was sent}

\item{\code{possible_names}}{List of possible names}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A proper filename
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-iter_dialogs"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-iter_dialogs}{}}}
\subsection{Method \code{iter_dialogs()}}{
Gets an iterator over dialogs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$iter_dialogs(
  limit = NULL,
  offset_date = NULL,
  offset_id = 0,
  offset_peer = InputPeerEmpty$new(),
  ignore_pinned = FALSE,
  ignore_migrated = FALSE,
  folder = NULL,
  archived = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{The maximum number of dialogs to retrieve.}

\item{\code{offset_date}}{The offset date to be used.}

\item{\code{offset_id}}{The message ID to be used as an offset.}

\item{\code{offset_peer}}{The peer to be used as an offset.}

\item{\code{ignore_pinned}}{Whether pinned dialogs should be ignored or not.}

\item{\code{ignore_migrated}}{Whether Chat that have "migrated_to" a Channel should be included or not.}

\item{\code{folder}}{The folder from which the dialogs should be retrieved.}

\item{\code{archived}}{Alias for folder. If unspecified, all will be returned,
FALSE implies folder=0 and TRUE implies folder=1.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An iterator over dialogs.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_dialogs"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_dialogs}{}}}
\subsection{Method \code{get_dialogs()}}{
Gets the dialogs (open conversations/subscribed channels).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_dialogs(
  limit = NULL,
  offset_date = NULL,
  offset_id = 0,
  offset_peer = InputPeerEmpty$new(),
  ignore_pinned = FALSE,
  ignore_migrated = FALSE,
  folder = NULL,
  archived = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{limit}}{How many dialogs to be retrieved as maximum. Can be set to
NULL to retrieve all dialogs. Note that this may take
whole minutes if you have hundreds of dialogs, as Telegram
will tell the library to slow down through a
"FloodWaitError".}

\item{\code{offset_date}}{The offset date to be used.}

\item{\code{offset_id}}{The message ID to be used as an offset.}

\item{\code{offset_peer}}{The peer to be used as an offset.}

\item{\code{ignore_pinned}}{Whether pinned dialogs should be ignored or not.}

\item{\code{ignore_migrated}}{Whether Chat that have "migrated_to" a Channel
should be included or not. By default all the chats in your
dialogs are returned, but setting this to TRUE will ignore
(i.e. skip) them in the same way official applications do.}

\item{\code{folder}}{The folder from which the dialogs should be retrieved.}

\item{\code{archived}}{Alias for folder. If unspecified, all will be returned,
FALSE implies folder=0 and TRUE implies folder=1.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of dialogs.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-iter_drafts"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-iter_drafts}{}}}
\subsection{Method \code{iter_drafts()}}{
Gets the draft messages.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$iter_drafts(entity = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity or list of entities for which to fetch the draft messages.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An iterator over draft messages.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_drafts"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_drafts}{}}}
\subsection{Method \code{get_drafts()}}{
Gets the draft messages.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_drafts(entity = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity or list of entities for which to fetch the draft messages.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of draft messages.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-edit_folder"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-edit_folder}{}}}
\subsection{Method \code{edit_folder()}}{
Edits the folder used by one or more dialogs to archive them.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$edit_folder(entity = NULL, folder = NULL, unpack = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity or list of entities to move to the desired archive folder.}

\item{\code{folder}}{The folder to which the dialog should be archived to.}

\item{\code{unpack}}{If you want to unpack an archived folder, set this
parameter to the folder number that you want to delete.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The Updates object that the request produces.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-delete_dialog"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-delete_dialog}{}}}
\subsection{Method \code{delete_dialog()}}{
Deletes a dialog (leaves a chat or channel).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$delete_dialog(entity, revoke = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity of the dialog to delete.}

\item{\code{revoke}}{Whether to revoke the messages from the other peer.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The Updates object that the request produces, or nothing for private conversations.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-conversation"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-conversation}{}}}
\subsection{Method \code{conversation()}}{
Creates a new conversation with the given entity.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$conversation(
  entity,
  timeout = 60,
  total_timeout = NULL,
  max_messages = 100,
  exclusive = TRUE,
  replies_are_responses = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity with which a new conversation should be opened.}

\item{\code{timeout}}{The default timeout (in seconds) per action to be used.}

\item{\code{total_timeout}}{The total timeout (in seconds) to use for the whole conversation.}

\item{\code{max_messages}}{The maximum amount of messages this conversation will remember.}

\item{\code{exclusive}}{Whether the conversation should be exclusive within a single chat.}

\item{\code{replies_are_responses}}{Whether replies should be treated as responses or not.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new Conversation object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-iter_participants"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-iter_participants}{}}}
\subsection{Method \code{iter_participants()}}{
Iterator over the participants belonging to the specified chat.

The order is unspecified.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$iter_participants(
  entity,
  limit = NULL,
  search = "",
  filter = NULL,
  aggressive = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity from which to retrieve the participants list.}

\item{\code{limit}}{Limits amount of participants fetched. Default is NULL.}

\item{\code{search}}{Look for participants with this string in name/username. Default is ''.}

\item{\code{filter}}{The filter to be used, if you want e.g. only admins. Default is NULL.}

\item{\code{aggressive}}{Does nothing. Kept for backwards-compatibility. Default is FALSE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A _ParticipantsIter object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Show all user IDs in a chat
iter <- client$iter_participants(chat)
for (user in iter) {
  print(user$id)
}

# Search by name
iter <- client$iter_participants(chat, search = 'name')
for (user in iter) {
  print(user$username)
}

# Filter by admins
filter <- ChannelParticipantsAdmins()
iter <- client$iter_participants(chat, filter = filter)
for (user in iter) {
  print(user$first_name)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_participants"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_participants}{}}}
\subsection{Method \code{get_participants()}}{
Same as iter_participants(), but returns a TotalList instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_participants(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed to iter_participants.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A TotalList of participants.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{users <- client$get_participants(chat)
print(users[[1]]$first_name)

for (user in users) {
  if (!is.null(user$username)) {
    print(user$username)
  }
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-iter_admin_log"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-iter_admin_log}{}}}
\subsection{Method \code{iter_admin_log()}}{
Iterator over the admin log for the specified channel.

The default order is from the most recent event to the oldest.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$iter_admin_log(
  entity,
  limit = NULL,
  max_id = 0,
  min_id = 0,
  search = NULL,
  admins = NULL,
  join = NULL,
  leave = NULL,
  invite = NULL,
  restrict = NULL,
  unrestrict = NULL,
  ban = NULL,
  unban = NULL,
  promote = NULL,
  demote = NULL,
  info = NULL,
  settings = NULL,
  pinned = NULL,
  edit = NULL,
  delete = NULL,
  group_call = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel entity from which to get its admin log.}

\item{\code{limit}}{Number of events to be retrieved. Default is NULL.}

\item{\code{max_id}}{All events with a higher (newer) ID or equal to this will be excluded. Default is 0.}

\item{\code{min_id}}{All events with a lower (older) ID or equal to this will be excluded. Default is 0.}

\item{\code{search}}{The string to be used as a search query. Default is NULL.}

\item{\code{admins}}{If present, filter by these admins. Default is NULL.}

\item{\code{join}}{If TRUE, events for when a user joined will be returned. Default is NULL.}

\item{\code{leave}}{If TRUE, events for when a user leaves will be returned. Default is NULL.}

\item{\code{invite}}{If TRUE, events for when a user joins through an invite link will be returned. Default is NULL.}

\item{\code{restrict}}{If TRUE, events with partial restrictions will be returned. Default is NULL.}

\item{\code{unrestrict}}{If TRUE, events removing restrictions will be returned. Default is NULL.}

\item{\code{ban}}{If TRUE, events applying or removing all restrictions will be returned. Default is NULL.}

\item{\code{unban}}{If TRUE, events removing all restrictions will be returned. Default is NULL.}

\item{\code{promote}}{If TRUE, events with admin promotions will be returned. Default is NULL.}

\item{\code{demote}}{If TRUE, events with admin demotions will be returned. Default is NULL.}

\item{\code{info}}{If TRUE, events changing the group info will be returned. Default is NULL.}

\item{\code{settings}}{If TRUE, events changing the group settings will be returned. Default is NULL.}

\item{\code{pinned}}{If TRUE, events of new pinned messages will be returned. Default is NULL.}

\item{\code{edit}}{If TRUE, events of message edits will be returned. Default is NULL.}

\item{\code{delete}}{If TRUE, events of message deletions will be returned. Default is NULL.}

\item{\code{group_call}}{If TRUE, events related to group calls will be returned. Default is NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An _AdminLogIter object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{iter <- client$iter_admin_log(channel)
for (event in iter) {
  if (event$changed_title) {
    print(paste('The title changed from', event$old, 'to', event$new))
  }
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_admin_log"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_admin_log}{}}}
\subsection{Method \code{get_admin_log()}}{
Same as iter_admin_log(), but returns a list instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_admin_log(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed to iter_admin_log.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of admin log events.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Get a list of deleted message events which said "heck"
events <- client$get_admin_log(channel, search = 'heck', delete = TRUE)
print(events[[1]]$old)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-iter_profile_photos"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-iter_profile_photos}{}}}
\subsection{Method \code{iter_profile_photos()}}{
Iterator over a user's profile photos or a chat's photos.

The order is from the most recent photo to the oldest.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$iter_profile_photos(
  entity,
  limit = NULL,
  offset = 0,
  max_id = 0
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity from which to get the profile or chat photos.}

\item{\code{limit}}{Number of photos to be retrieved. Default is NULL.}

\item{\code{offset}}{How many photos should be skipped before returning the first one. Default is 0.}

\item{\code{max_id}}{The maximum ID allowed when fetching photos. Default is 0.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A _ProfilePhotoIter object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Download all the profile photos of some user
iter <- client$iter_profile_photos(user)
for (photo in iter) {
  client$download_media(photo)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_profile_photos"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_profile_photos}{}}}
\subsection{Method \code{get_profile_photos()}}{
Same as iter_profile_photos(), but returns a TotalList instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_profile_photos(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed to iter_profile_photos.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A TotalList of photos.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Get the photos of a channel
photos <- client$get_profile_photos(channel)
client$download_media(photos[[length(photos)]])
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-action"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-action}{}}}
\subsection{Method \code{action()}}{
Returns a context-manager object to represent a "chat action".

Chat actions indicate things like "user is typing", etc.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$action(entity, action, delay = 4, auto_cancel = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity where the action should be showed in.}

\item{\code{action}}{The action to show (string or SendMessageAction).}

\item{\code{delay}}{The delay in seconds between sending actions. Default is 4.}

\item{\code{auto_cancel}}{Whether to cancel the action automatically. Default is TRUE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A _ChatAction object or a coroutine.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Type for 2 seconds, then send a message
action <- client$action(chat, 'typing')
Sys.sleep(2)
client$send_message(chat, 'Hello world! I type slow ^^')

# Cancel any previous action
client$action(chat, 'cancel')

# Upload a document, showing its progress
action <- client$action(chat, 'document')
client$send_file(chat, zip_file, progress_callback = action$progress)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-edit_admin"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-edit_admin}{}}}
\subsection{Method \code{edit_admin()}}{
Edits admin permissions for someone in a chat.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$edit_admin(
  entity,
  user,
  change_info = NULL,
  post_messages = NULL,
  edit_messages = NULL,
  delete_messages = NULL,
  ban_users = NULL,
  invite_users = NULL,
  pin_messages = NULL,
  add_admins = NULL,
  manage_call = NULL,
  anonymous = NULL,
  is_admin = NULL,
  title = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel, megagroup or chat where the promotion should happen.}

\item{\code{user}}{The user to be promoted.}

\item{\code{change_info}}{Whether the user can change info. Default is NULL.}

\item{\code{post_messages}}{Whether the user can post in the channel. Default is NULL.}

\item{\code{edit_messages}}{Whether the user can edit messages. Default is NULL.}

\item{\code{delete_messages}}{Whether the user can delete messages. Default is NULL.}

\item{\code{ban_users}}{Whether the user can ban users. Default is NULL.}

\item{\code{invite_users}}{Whether the user can invite users. Default is NULL.}

\item{\code{pin_messages}}{Whether the user can pin messages. Default is NULL.}

\item{\code{add_admins}}{Whether the user can add admins. Default is NULL.}

\item{\code{manage_call}}{Whether the user can manage group calls. Default is NULL.}

\item{\code{anonymous}}{Whether the user remains anonymous. Default is NULL.}

\item{\code{is_admin}}{Whether the user is an admin. Default is NULL.}

\item{\code{title}}{The custom title for the admin. Default is NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The resulting Updates object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Allowing user to pin messages in chat
client$edit_admin(chat, user, pin_messages = TRUE)

# Granting all permissions except for add_admins
client$edit_admin(chat, user, is_admin = TRUE, add_admins = FALSE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-edit_permissions"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-edit_permissions}{}}}
\subsection{Method \code{edit_permissions()}}{
Edits user restrictions in a chat.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$edit_permissions(
  entity,
  user = NULL,
  until_date = NULL,
  view_messages = TRUE,
  send_messages = TRUE,
  send_media = TRUE,
  send_stickers = TRUE,
  send_gifs = TRUE,
  send_games = TRUE,
  send_inline = TRUE,
  embed_link_previews = TRUE,
  send_polls = TRUE,
  change_info = TRUE,
  invite_users = TRUE,
  pin_messages = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel or megagroup where the restriction should happen.}

\item{\code{user}}{The user to restrict. Default is NULL.}

\item{\code{until_date}}{When the user will be unbanned. Default is NULL.}

\item{\code{view_messages}}{Whether the user can view messages. Default is TRUE.}

\item{\code{send_messages}}{Whether the user can send messages. Default is TRUE.}

\item{\code{send_media}}{Whether the user can send media. Default is TRUE.}

\item{\code{send_stickers}}{Whether the user can send stickers. Default is TRUE.}

\item{\code{send_gifs}}{Whether the user can send gifs. Default is TRUE.}

\item{\code{send_games}}{Whether the user can send games. Default is TRUE.}

\item{\code{send_inline}}{Whether the user can use inline bots. Default is TRUE.}

\item{\code{embed_link_previews}}{Whether the user can embed link previews. Default is TRUE.}

\item{\code{send_polls}}{Whether the user can send polls. Default is TRUE.}

\item{\code{change_info}}{Whether the user can change info. Default is TRUE.}

\item{\code{invite_users}}{Whether the user can invite users. Default is TRUE.}

\item{\code{pin_messages}}{Whether the user can pin messages. Default is TRUE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The resulting Updates object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Banning user from chat forever
client$edit_permissions(chat, user, view_messages = FALSE)

# Kicking someone (ban + un-ban)
client$edit_permissions(chat, user, view_messages = FALSE)
client$edit_permissions(chat, user)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-kick_participant"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-kick_participant}{}}}
\subsection{Method \code{kick_participant()}}{
Kicks a user from a chat.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$kick_participant(entity, user)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel or chat where the user should be kicked from.}

\item{\code{user}}{The user to kick.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The service message produced about a user being kicked, if any.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Kick some user from some chat, and deleting the service message
msg <- client$kick_participant(chat, user)
msg$delete()

# Leaving chat
client$kick_participant(chat, 'me')
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_permissions"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_permissions}{}}}
\subsection{Method \code{get_permissions()}}{
Fetches the permissions of a user in a specific chat or channel.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_permissions(entity, user = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel or chat the user is participant of.}

\item{\code{user}}{Target user. Default is NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ParticipantPermissions instance or NULL.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{permissions <- client$get_permissions(chat, user)
if (permissions$is_admin) {
  # do something
}

# Get Banned Permissions of Chat
client$get_permissions(chat)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_stats"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_stats}{}}}
\subsection{Method \code{get_stats()}}{
Retrieves statistics from the given megagroup or broadcast channel.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_stats(entity, message = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel from which to get statistics.}

\item{\code{message}}{The message ID from which to get statistics. Default is NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
BroadcastStats, MegagroupStats, or MessageStats.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{channel <- -100123
stats <- client$get_stats(channel)
print(paste('Stats from', stats$period$min_date, 'to', stats$period$max_date, ':'))
print(stats$stringify())
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-inline_query"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-inline_query}{}}}
\subsection{Method \code{inline_query()}}{
Makes an inline query to the specified bot (e.g., "@vote New Poll").
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$inline_query(
  bot,
  query,
  entity = NULL,
  offset = NULL,
  geo_point = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{bot}}{The bot entity to which the inline query should be made.}

\item{\code{query}}{The query string to send to the bot.}

\item{\code{entity}}{(Optional) The entity where the inline query is being made from.}

\item{\code{offset}}{(Optional) The string offset to use for the bot.}

\item{\code{geo_point}}{(Optional) Geo point location information for localized results.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of inline results.
Placeholder for invoking Telegram API functions.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-invoke_function"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-invoke_function}{}}}
\subsection{Method \code{invoke_function()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$invoke_function(function_name, params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{function_name}}{The name of the function to invoke.}

\item{\code{params}}{The parameters for the function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API response.
Placeholder for processing inline results.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-custom_inline_results"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-custom_inline_results}{}}}
\subsection{Method \code{custom_inline_results()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$custom_inline_results(result, peer)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{result}}{The raw result from the API.}

\item{\code{peer}}{The peer entity.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Processed inline results.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-iter_messages"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-iter_messages}{}}}
\subsection{Method \code{iter_messages()}}{
Iterate over messages

Iterator over the messages for the given chat. The default order is newest to oldest,
set reverse = TRUE to iterate oldest to newest.

If either search, filter or from_user are provided, server-side search will be used.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$iter_messages(
  entity,
  limit = NULL,
  offset_date = NULL,
  offset_id = 0L,
  max_id = 0L,
  min_id = 0L,
  add_offset = 0L,
  search = NULL,
  filter = NULL,
  from_user = NULL,
  wait_time = NULL,
  ids = NULL,
  reverse = FALSE,
  reply_to = NULL,
  scheduled = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Entity to retrieve the message history from (can be NULL for global search).}

\item{\code{limit}}{integer or NULL. Number of messages to retrieve; NULL fetches all.}

\item{\code{offset_date}}{POSIXct or Date. Only messages previous to this date are returned.}

\item{\code{offset_id}}{integer. Only messages previous to this id are returned.}

\item{\code{max_id}}{integer. Exclude messages with id >= this value.}

\item{\code{min_id}}{integer. Exclude messages with id <= this value.}

\item{\code{add_offset}}{integer. Additional message offset.}

\item{\code{search}}{character. Text query for server-side search.}

\item{\code{filter}}{A filter object or constructor for server-side filtering.}

\item{\code{from_user}}{Entity. Only messages from this user will be returned.}

\item{\code{wait_time}}{numeric. Seconds to sleep between requests to avoid flood waits.}

\item{\code{ids}}{integer or integer vector. If set, return these ids instead of iterating.}

\item{\code{reverse}}{logical. If TRUE, iterate oldest to newest.}

\item{\code{reply_to}}{integer. If set, iterate replies to this message id.}

\item{\code{scheduled}}{logical. If TRUE, return scheduled messages (ignores other params except entity).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An iterator-like object or list depending on implementation.
Get messages

Same as iter_messages(), but returns a collected list/vector.
If limit is missing, defaults to 1 unless both min_id and max_id are set.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_messages"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_messages}{}}}
\subsection{Method \code{get_messages()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_messages(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Passed through to iter_messages().}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of messages or a single message if ids is a scalar.
Send a message

Sends a message to the specified user, chat or channel. Supports text, media, buttons,
scheduling, and other options.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-send_message"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-send_message}{}}}
\subsection{Method \code{send_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$send_message(
  entity,
  message = "",
  reply_to = NULL,
  attributes = NULL,
  parse_mode = NULL,
  formatting_entities = NULL,
  link_preview = TRUE,
  file = NULL,
  thumb = NULL,
  force_document = FALSE,
  clear_draft = FALSE,
  buttons = NULL,
  silent = NULL,
  background = NULL,
  supports_streaming = FALSE,
  schedule = NULL,
  comment_to = NULL,
  nosound_video = NULL,
  send_as = NULL,
  message_effect_id = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Target entity.}

\item{\code{message}}{Text or message-like object.}

\item{\code{reply_to}}{Message id or message object to reply to.}

\item{\code{attributes}}{Optional media attributes.}

\item{\code{parse_mode}}{Parse mode for text (e.g., 'md', 'html'); NULL to disable.}

\item{\code{formatting_entities}}{Message entities; overrides parse_mode if provided.}

\item{\code{link_preview}}{logical. Whether to show link previews for URLs in text.}

\item{\code{file}}{File-like object or vector of file-like objects to send.}

\item{\code{thumb}}{Optional JPEG thumbnail for documents.}

\item{\code{force_document}}{logical. Force sending file as document.}

\item{\code{clear_draft}}{logical. Clear existing draft before sending.}

\item{\code{buttons}}{Inline or reply keyboard markup.}

\item{\code{silent}}{logical. Send without notification sounds.}

\item{\code{background}}{logical. Send in background.}

\item{\code{supports_streaming}}{logical. Mark video as streamable.}

\item{\code{schedule}}{POSIXct/Date. Schedule time.}

\item{\code{comment_to}}{Message id or message object to comment to (linked group).}

\item{\code{nosound_video}}{logical. Treat video without audio accordingly.}

\item{\code{send_as}}{Entity to send the message as (channels/chats).}

\item{\code{message_effect_id}}{integer. Effect id (private chats only).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The sent message object.
Forward messages

Forwards one or more messages to the specified entity.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-forward_messages"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-forward_messages}{}}}
\subsection{Method \code{forward_messages()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$forward_messages(
  entity,
  messages,
  from_peer = NULL,
  background = NULL,
  with_my_score = NULL,
  silent = NULL,
  as_album = NULL,
  schedule = NULL,
  drop_author = NULL,
  drop_media_captions = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Destination entity.}

\item{\code{messages}}{Message ids or message objects to forward.}

\item{\code{from_peer}}{Source entity if messages are ids.}

\item{\code{background}}{logical. Forward in background.}

\item{\code{with_my_score}}{logical. Include game score.}

\item{\code{silent}}{logical. No notification sounds.}

\item{\code{as_album}}{logical. Deprecated; no effect.}

\item{\code{schedule}}{POSIXct/Date. Schedule time.}

\item{\code{drop_author}}{logical. Forward without quoting original author.}

\item{\code{drop_media_captions}}{logical. Strip captions (requires drop_author = TRUE).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of forwarded message objects (or single if input wasn't a list).
Edit a message

Edits a message to change its text or media.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-edit_message"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-edit_message}{}}}
\subsection{Method \code{edit_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$edit_message(
  entity,
  message = NULL,
  text = NULL,
  parse_mode = NULL,
  attributes = NULL,
  formatting_entities = NULL,
  link_preview = TRUE,
  file = NULL,
  thumb = NULL,
  force_document = FALSE,
  buttons = NULL,
  supports_streaming = FALSE,
  schedule = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Chat entity or the message itself.}

\item{\code{message}}{Message id, message object, input message id, or new text if entity is a message.}

\item{\code{text}}{New text for the message (optional).}

\item{\code{parse_mode}}{Parse mode for text.}

\item{\code{attributes}}{Media attributes.}

\item{\code{formatting_entities}}{Explicit entities (overrides parse_mode).}

\item{\code{link_preview}}{logical. Whether to show link previews for URLs in text.}

\item{\code{file}}{File-like object to replace existing media.}

\item{\code{thumb}}{Optional JPEG thumbnail for documents.}

\item{\code{force_document}}{logical. Force sending file as document.}

\item{\code{buttons}}{Inline or reply keyboard markup.}

\item{\code{supports_streaming}}{logical. Mark video as streamable.}

\item{\code{schedule}}{POSIXct/Date. Schedule time.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The edited message (or logical for inline bot messages depending on API).
Delete messages

Deletes the given messages, optionally for everyone (revoke).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-delete_messages"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-delete_messages}{}}}
\subsection{Method \code{delete_messages()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$delete_messages(entity, message_ids, revoke = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Entity the messages belong to (may be NULL for some chats).}

\item{\code{message_ids}}{Integer id, vector of ids, or message objects.}

\item{\code{revoke}}{logical. If TRUE, delete for everyone where applicable.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of results (AffectedMessages per chunk) depending on API.
Send read acknowledge

Marks messages as read and optionally clears mentions/reactions.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-send_read_acknowledge"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-send_read_acknowledge}{}}}
\subsection{Method \code{send_read_acknowledge()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$send_read_acknowledge(
  entity,
  message = NULL,
  max_id = NULL,
  clear_mentions = FALSE,
  clear_reactions = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Target entity.}

\item{\code{message}}{Message or vector of messages to derive max_id when max_id is NULL.}

\item{\code{max_id}}{Integer max id up to which messages will be marked read.}

\item{\code{clear_mentions}}{logical. Clear mention badge.}

\item{\code{clear_reactions}}{logical. Clear reactions badge.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
logical indicating success depending on API.
Pin a message

Pins a message in a chat.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-pin_message"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-pin_message}{}}}
\subsection{Method \code{pin_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$pin_message(entity, message, notify = FALSE, pm_oneside = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Target entity.}

\item{\code{message}}{Message id or message object to pin; if NULL, unpins all.}

\item{\code{notify}}{logical. Notify members about the pin.}

\item{\code{pm_oneside}}{logical. Pin just for you in private chats (opposite of official by default).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API-dependent result or pinned service message.
Unpin a message

Unpins a message in a chat. If message is NULL, unpins all.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-unpin_message"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-unpin_message}{}}}
\subsection{Method \code{unpin_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$unpin_message(entity, message = NULL, notify = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Target entity.}

\item{\code{message}}{Message id or message object to unpin; NULL to unpin all.}

\item{\code{notify}}{logical. Notify members about the unpin.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API-dependent result.
Resolve comment target for sending comments (linked discussion)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_comment_data"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_comment_data}{}}}
\subsection{Method \code{get_comment_data()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_comment_data(entity, message)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-pin_internal"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-pin_internal}{}}}
\subsection{Method \code{pin_internal()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$pin_internal(
  entity,
  message,
  unpin,
  notify = FALSE,
  pm_oneside = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-send_file"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-send_file}{}}}
\subsection{Method \code{send_file()}}{
Sends a file to a specified entity.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$send_file(
  entity,
  file,
  caption = NULL,
  force_document = FALSE,
  file_size = NULL,
  progress_callback = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity to send the file to.}

\item{\code{file}}{The file to send (path, raw bytes, or URL).}

\item{\code{caption}}{Optional caption for the media.}

\item{\code{force_document}}{Whether to force sending the file as a document.}

\item{\code{file_size}}{Optional size of the file in bytes.}

\item{\code{progress_callback}}{Optional callback to track upload progress.}

\item{\code{...}}{Additional parameters.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the result of the operation.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-upload_file"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-upload_file}{}}}
\subsection{Method \code{upload_file()}}{
Uploads a file to Telegram's servers without sending it.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$upload_file(
  file,
  part_size_kb = NULL,
  file_size = NULL,
  progress_callback = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to upload.}

\item{\code{part_size_kb}}{The size of chunks in KB.}

\item{\code{file_size}}{Optional size of the file in bytes.}

\item{\code{progress_callback}}{Optional callback to track upload progress.}

\item{\code{...}}{Additional parameters.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the uploaded file details.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-file_to_media"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-file_to_media}{}}}
\subsection{Method \code{file_to_media()}}{
Converts a file to a media format.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$file_to_media(
  file,
  force_document = FALSE,
  file_size = NULL,
  progress_callback = NULL,
  attributes = NULL,
  thumb = NULL,
  allow_cache = TRUE,
  voice_note = FALSE,
  video_note = FALSE,
  supports_streaming = FALSE,
  mime_type = NULL,
  as_image = NULL,
  ttl = NULL,
  nosound_video = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to convert.}

\item{\code{force_document}}{Whether to force sending the file as a document.}

\item{\code{file_size}}{Optional size of the file in bytes.}

\item{\code{progress_callback}}{Optional callback to track upload progress.}

\item{\code{attributes}}{Optional attributes for the media.}

\item{\code{thumb}}{Optional thumbnail for the media.}

\item{\code{allow_cache}}{Whether to allow caching of the media.}

\item{\code{...}}{Additional parameters.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list containing the file handle, media, and whether it is an image.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-resize_photo_if_needed"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-resize_photo_if_needed}{}}}
\subsection{Method \code{resize_photo_if_needed()}}{
Resizes a photo if needed to meet Telegram's requirements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$resize_photo_if_needed(
  file,
  is_image,
  width = 2560,
  height = 2560
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to resize.}

\item{\code{is_image}}{Whether the file is an image.}

\item{\code{width}}{The maximum width of the image.}

\item{\code{height}}{The maximum height of the image.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The resized file or the original file if no resizing is needed.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-is_image"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-is_image}{}}}
\subsection{Method \code{is_image()}}{
Checks if a file is an image.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$is_image(file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if the file is an image, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_appropriated_part_size"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_appropriated_part_size}{}}}
\subsection{Method \code{get_appropriated_part_size()}}{
Determines the appropriate part size for file uploads.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_appropriated_part_size(file_size)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_size}}{The size of the file in bytes.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The part size in KB.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-invoke"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-invoke}{}}}
\subsection{Method \code{invoke()}}{
Invokes an API request.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$invoke(request)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{request}}{The request to invoke.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The result of the API call.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-build_reply_markup"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-build_reply_markup}{}}}
\subsection{Method \code{build_reply_markup()}}{
Builds a ReplyInlineMarkup or ReplyKeyboardMarkup for the given buttons.

Does nothing if either no buttons are provided or the provided
argument is already a reply markup.

This method is not asynchronous.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$build_reply_markup(buttons = NULL, inline_only = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{buttons}}{The button, list of buttons, array of buttons or markup
to convert into a markup.}

\item{\code{inline_only}}{Whether the buttons must be inline buttons only or not.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ReplyInlineMarkup or ReplyKeyboardMarkup object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-run_until_disconnected"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-run_until_disconnected}{}}}
\subsection{Method \code{run_until_disconnected()}}{
Runs the update loop until disconnected.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$run_until_disconnected()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A promise that resolves when disconnected.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-set_receive_updates"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-set_receive_updates}{}}}
\subsection{Method \code{set_receive_updates()}}{
Sets whether to receive updates.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$set_receive_updates(receive_updates)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{receive_updates}}{A logical value indicating whether to receive updates.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A promise that resolves when the updates are set.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-on"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-on}{}}}
\subsection{Method \code{on()}}{
Adds an event handler for a specific event.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$on(event)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{event}}{The event type to handle.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A decorator function that wraps the event handler.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-add_event_handler"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-add_event_handler}{}}}
\subsection{Method \code{add_event_handler()}}{
Adds an event handler for a specific event.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$add_event_handler(callback, event = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{callback}}{The callback function to handle the event.}

\item{\code{event}}{The event type to handle.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL or an error if the event is not found.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-remove_event_handler"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-remove_event_handler}{}}}
\subsection{Method \code{remove_event_handler()}}{
Removes an event handler for a specific event.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$remove_event_handler(callback, event = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{callback}}{The callback function to remove.}

\item{\code{event}}{The event type to remove.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The number of handlers removed.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-list_event_handlers"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-list_event_handlers}{}}}
\subsection{Method \code{list_event_handlers()}}{
Lists all event handlers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$list_event_handlers()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of event handlers with their callbacks and events.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-catch_up"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-catch_up}{}}}
\subsection{Method \code{catch_up()}}{
Catches up on updates.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$catch_up()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A promise that resolves when caught up.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-update_loop"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-update_loop}{}}}
\subsection{Method \code{update_loop()}}{
Handles the update loop.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$update_loop()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A promise that resolves when the loop is finished.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-preprocess_updates"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-preprocess_updates}{}}}
\subsection{Method \code{preprocess_updates()}}{
Preprocesses updates before dispatching.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$preprocess_updates(updates, users, chats)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{updates}}{A list of updates to preprocess.}

\item{\code{users}}{A list of user entities.}

\item{\code{chats}}{A list of chat entities.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of preprocessed updates.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-keepalive_loop"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-keepalive_loop}{}}}
\subsection{Method \code{keepalive_loop()}}{
Sends a keepalive ping to the server.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$keepalive_loop()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A promise that resolves when the ping is sent.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-dispatch_update"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-dispatch_update}{}}}
\subsection{Method \code{dispatch_update()}}{
Dispatches an update to the appropriate event handlers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$dispatch_update(update)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{update}}{The update to dispatch.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A promise that resolves when the update is dispatched.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-handle_auto_reconnect"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-handle_auto_reconnect}{}}}
\subsection{Method \code{handle_auto_reconnect()}}{
Handles auto-reconnect after a disconnection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$handle_auto_reconnect()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A promise that resolves when the auto-reconnect is handled.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-set_parse_mode"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-set_parse_mode}{}}}
\subsection{Method \code{set_parse_mode()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$set_parse_mode(mode)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mode}}{The parse mode to set (e.g., "markdown", "html").}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
Get the current parse mode.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_parse_mode"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_parse_mode}{}}}
\subsection{Method \code{get_parse_mode()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_parse_mode()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The current parse mode.
Sanitize the parse mode input.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-sanitize_parse_mode"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-sanitize_parse_mode}{}}}
\subsection{Method \code{sanitize_parse_mode()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$sanitize_parse_mode(mode)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mode}}{The parse mode to sanitize.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Sanitized parse mode.
Parse a message text based on the parse mode.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-parse_message_text"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-parse_message_text}{}}}
\subsection{Method \code{parse_message_text()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$parse_message_text(message, parse_mode = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message}}{The message text to parse.}

\item{\code{parse_mode}}{The parse mode to use (optional).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with parsed message and entities.
Replace an entity with a mention of a user.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-replace_with_mention"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-replace_with_mention}{}}}
\subsection{Method \code{replace_with_mention()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$replace_with_mention(entities, i, user)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entities}}{The list of entities.}

\item{\code{i}}{The index of the entity to replace.}

\item{\code{user}}{The user to mention.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if replaced successfully, FALSE otherwise.
Extract the response message based on the request and result.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_response_message"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_response_message}{}}}
\subsection{Method \code{get_response_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_response_message(request, result, input_chat)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{request}}{The original request.}

\item{\code{result}}{The result from the API.}

\item{\code{input_chat}}{The input chat entity.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The response message or NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-call"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-call}{}}}
\subsection{Method \code{call()}}{
Make a call to the Telegram API.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$call(request, ordered = FALSE, flood_sleep_threshold = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{request}}{The request object.}

\item{\code{ordered}}{Boolean indicating if the call is ordered.}

\item{\code{flood_sleep_threshold}}{The threshold for flood sleep.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the result of the API call.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-call_internal"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-call_internal}{}}}
\subsection{Method \code{call_internal()}}{
Make an internal call to the Telegram API.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$call_internal(
  sender,
  request,
  ordered = FALSE,
  flood_sleep_threshold = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sender}}{The sender object.}

\item{\code{request}}{The request object.}

\item{\code{ordered}}{Boolean indicating if the call is ordered.}

\item{\code{flood_sleep_threshold}}{The threshold for flood sleep.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The result of the API call.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_me"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_me}{}}}
\subsection{Method \code{get_me()}}{
Get the current user.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_me(input_peer = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_peer}}{Boolean indicating if the result should be an InputPeer.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the current user.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-self_id"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-self_id}{}}}
\subsection{Method \code{self_id()}}{
Get the ID of the current user.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$self_id()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The ID of the current user.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-is_bot"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-is_bot}{}}}
\subsection{Method \code{is_bot()}}{
Check if the current user is a bot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$is_bot()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A future object indicating if the user is a bot.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-is_user_authorized"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-is_user_authorized}{}}}
\subsection{Method \code{is_user_authorized()}}{
Check if the current user is authorized.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$is_user_authorized()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A future object indicating if the user is authorized.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_entity"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_entity}{}}}
\subsection{Method \code{get_entity()}}{
Get an entity from a given input.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_entity(entity)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The input entity (user, chat, or channel).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the entity.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_input_entity"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_input_entity}{}}}
\subsection{Method \code{get_input_entity()}}{
Get the input entity for a given peer.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_input_entity(peer)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{The peer to get the input entity for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the input entity.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_peer"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_peer}{}}}
\subsection{Method \code{get_peer()}}{
Get the peer for a given input entity.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_peer(peer)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{The input entity to get the peer for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the peer.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_peer_id"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_peer_id}{}}}
\subsection{Method \code{get_peer_id()}}{
Get the ID of a given peer.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_peer_id(peer, add_mark = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{The input entity to get the ID for.}

\item{\code{add_mark}}{Boolean indicating if the ID should be marked.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The ID of the peer.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_entity_from_string"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_entity_from_string}{}}}
\subsection{Method \code{get_entity_from_string()}}{
Get an entity from a string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_entity_from_string(string)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{string}}{The string to get the entity from.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the entity.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_input_dialog"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_input_dialog}{}}}
\subsection{Method \code{get_input_dialog()}}{
Get the input dialog for a given dialog.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_input_dialog(dialog)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dialog}}{The dialog to get the input dialog for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the input dialog.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-get_input_notify"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-get_input_notify}{}}}
\subsection{Method \code{get_input_notify()}}{
Get the input notify for a given notify.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$get_input_notify(notify)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{notify}}{The notify to get the input notify for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the input notify.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-new"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-new}{}}}
\subsection{Method \code{new()}}{
Create a new TelegramClient instance
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed to the parent class}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TelegramClient-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TelegramClient-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TelegramClient$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
