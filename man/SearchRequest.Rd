% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_contacts.R, R/functions_messages.R
\name{SearchRequest}
\alias{SearchRequest}
\title{SearchRequest}
\description{
Methods:
- initialize(q, limit): create new request
- to_list(): return a list representation suitable for JSON/dumping
- to_bytes(): return raw vector of bytes for the TL request

Represents a request to search messages. This class inherits from TLRequest.
}
\details{
R6 representation of the TL request: SearchRequest
}
\examples{
SearchRequest$new("hello", 10)$to_list()
Initialize SearchRequest

}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{SearchRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{integer Constructor id (hex)}

\item{\code{SUBCLASS_OF_ID}}{integer Subclass id (hex)}

\item{\code{q}}{character Query string}

\item{\code{limit}}{integer Result limit}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{q}}{character Query string}

\item{\code{limit}}{integer Result limit}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SearchRequest-new}{\code{SearchRequest$new()}}
\item \href{#method-SearchRequest-resolve}{\code{SearchRequest$resolve()}}
\item \href{#method-SearchRequest-to_dict}{\code{SearchRequest$to_dict()}}
\item \href{#method-SearchRequest-bytes}{\code{SearchRequest$bytes()}}
\item \href{#method-SearchRequest-clone}{\code{SearchRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$new(
  peer,
  q,
  filter,
  min_date = NULL,
  max_date = NULL,
  offset_id,
  add_offset,
  limit,
  max_id,
  min_id,
  hash,
  from_id = NULL,
  saved_peer_id = NULL,
  saved_reaction = NULL,
  top_msg_id = NULL
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$to_dict()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-bytes}{}}}
\subsection{Method \code{bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{SearchRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{The constructor ID for this request (0x29ee847a).}

\item{\code{SUBCLASS_OF_ID}}{The subclass ID for this request (0xd4b40b5e).}

\item{\code{CONSTRUCTOR_ID}}{The constructor ID.}

\item{\code{SUBCLASS_OF_ID}}{The subclass ID.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SearchRequest-new}{\code{SearchRequest$new()}}
\item \href{#method-SearchRequest-resolve}{\code{SearchRequest$resolve()}}
\item \href{#method-SearchRequest-to_dict}{\code{SearchRequest$to_dict()}}
\item \href{#method-SearchRequest-bytes}{\code{SearchRequest$bytes()}}
\item \href{#method-SearchRequest-clone}{\code{SearchRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-new}{}}}
\subsection{Method \code{new()}}{
Initialize the SearchRequest object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$new(
  peer,
  q,
  filter,
  min_date = NULL,
  max_date = NULL,
  offset_id,
  add_offset,
  limit,
  max_id,
  min_id,
  hash,
  from_id = NULL,
  saved_peer_id = NULL,
  saved_reaction = NULL,
  top_msg_id = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{The input peer.}

\item{\code{q}}{The search query string.}

\item{\code{filter}}{The messages filter.}

\item{\code{min_date}}{Optional minimum date.}

\item{\code{max_date}}{Optional maximum date.}

\item{\code{offset_id}}{The offset ID.}

\item{\code{add_offset}}{The additional offset.}

\item{\code{limit}}{The limit for results.}

\item{\code{max_id}}{The maximum ID.}

\item{\code{min_id}}{The minimum ID.}

\item{\code{hash}}{The hash for caching.}

\item{\code{from_id}}{Optional input peer for from ID.}

\item{\code{saved_peer_id}}{Optional input peer for saved peer ID.}

\item{\code{saved_reaction}}{Optional list of reactions.}

\item{\code{top_msg_id}}{Optional top message ID.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
Resolve the request using client and utils.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{The client object.}

\item{\code{utils}}{The utils object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
Convert the object to a dictionary.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$to_dict()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list representing the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-bytes}{}}}
\subsection{Method \code{bytes()}}{
Serialize the object to bytes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A raw vector of bytes.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SearchRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
