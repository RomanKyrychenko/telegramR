% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_channels.R, R/functions_stories.R
\docType{class}
\name{SearchPostsRequest}
\alias{SearchPostsRequest}
\title{SearchPostsRequest}
\format{
An R6 object inheriting from TLRequest
}
\usage{
SearchPostsRequest$new(offset, limit, hashtag = NULL, area = NULL, peer = NULL)
}
\description{
Represents a request to search for posts with specified parameters.
}
\details{
Represents a TL request to search posts/stories (by hashtag/area/peer).
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{SearchPostsRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{offset_rate}}{The offset rate for pagination.}

\item{\code{offset_peer}}{The offset peer for pagination.}

\item{\code{offset_id}}{The offset ID for pagination.}

\item{\code{limit}}{The limit on the number of results.}

\item{\code{hashtag}}{The hashtag to search for (optional).}

\item{\code{query}}{The query string to search for (optional).}

\item{\code{allow_paid_stars}}{The number of allowed paid stars (optional).}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{The constructor ID for this request.}

\item{\code{SUBCLASS_OF_ID}}{The subclass ID for this request.}

\item{\code{offset_rate}}{The offset rate for pagination.}

\item{\code{offset_peer}}{The offset peer for pagination.}

\item{\code{offset_id}}{The offset ID for pagination.}

\item{\code{query}}{The query string to search for (optional).}

\item{\code{allow_paid_stars}}{The number of allowed paid stars (optional).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SearchPostsRequest-new}{\code{SearchPostsRequest$new()}}
\item \href{#method-SearchPostsRequest-resolve}{\code{SearchPostsRequest$resolve()}}
\item \href{#method-SearchPostsRequest-to_list}{\code{SearchPostsRequest$to_list()}}
\item \href{#method-SearchPostsRequest-to_bytes}{\code{SearchPostsRequest$to_bytes()}}
\item \href{#method-SearchPostsRequest-clone}{\code{SearchPostsRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$new(offset, limit, hashtag = NULL, area = NULL, peer = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$to_bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{SearchPostsRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{offset}}{character offset cursor}

\item{\code{limit}}{integer limit}

\item{\code{hashtag}}{character or NULL}

\item{\code{area}}{TypeMediaArea or NULL}

\item{\code{peer}}{TypeInputPeer or NULL}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SearchPostsRequest-new}{\code{SearchPostsRequest$new()}}
\item \href{#method-SearchPostsRequest-resolve}{\code{SearchPostsRequest$resolve()}}
\item \href{#method-SearchPostsRequest-to_list}{\code{SearchPostsRequest$to_list()}}
\item \href{#method-SearchPostsRequest-to_bytes}{\code{SearchPostsRequest$to_bytes()}}
\item \href{#method-SearchPostsRequest-clone}{\code{SearchPostsRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-new}{}}}
\subsection{Method \code{new()}}{
Initialize SearchPostsRequest
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$new(offset, limit, hashtag = NULL, area = NULL, peer = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{offset}}{character}

\item{\code{limit}}{integer}

\item{\code{hashtag}}{character or NULL}

\item{\code{area}}{TypeMediaArea or NULL}

\item{\code{peer}}{TypeInputPeer or NULL}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
Resolve peer/area references
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{client with get_input_entity}

\item{\code{utils}}{utils with get_input_peer/get_input_media_area (area expected as TL object normally)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
Convert to list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
Serialize to raw TL bytes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SearchPostsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SearchPostsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SearchPostsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
