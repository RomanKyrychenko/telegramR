% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/messagecontainer.R
\name{MessageContainer}
\alias{MessageContainer}
\title{R6 Class Representing a MessageContainer}
\description{
Represents a container for multiple Telegram API messages.
}
\details{
The `MessageContainer` class is used to group multiple Telegram API messages together.
It provides methods to initialize the container, convert it to a dictionary representation,
and read messages from a binary reader.
}
\examples{

## ------------------------------------------------
## Method `MessageContainer$to_dict`
## ------------------------------------------------

container <- MessageContainer$new(messages = list())
container$to_dict()

## ------------------------------------------------
## Method `MessageContainer$from_reader`
## ------------------------------------------------

# Assuming `reader` is a binary reader object:
container <- MessageContainer$new()
container$from_reader(reader)
}
\section{Super class}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{MessageContainer}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{messages}}{A list of messages contained in the container.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MessageContainer-new}{\code{MessageContainer$new()}}
\item \href{#method-MessageContainer-to_dict}{\code{MessageContainer$to_dict()}}
\item \href{#method-MessageContainer-from_reader}{\code{MessageContainer$from_reader()}}
\item \href{#method-MessageContainer-clone}{\code{MessageContainer$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageContainer-new"></a>}}
\if{latex}{\out{\hypertarget{method-MessageContainer-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new `MessageContainer` object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageContainer$new(messages = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{messages}}{A list of messages to initialize the container with. Defaults to an empty list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `MessageContainer` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageContainer-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-MessageContainer-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
Convert the `MessageContainer` object to a dictionary representation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageContainer$to_dict()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list containing the fields of the `MessageContainer` object in dictionary format.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{container <- MessageContainer$new(messages = list())
container$to_dict()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageContainer-from_reader"></a>}}
\if{latex}{\out{\hypertarget{method-MessageContainer-from_reader}{}}}
\subsection{Method \code{from_reader()}}{
Read and parse a `MessageContainer` object from a binary reader.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageContainer$from_reader(reader)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reader}}{A binary reader object to read the messages from.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated `MessageContainer` object with the parsed messages.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Assuming `reader` is a binary reader object:
container <- MessageContainer$new()
container$from_reader(reader)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageContainer-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MessageContainer-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageContainer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
