% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R, R/requests.R
\name{InitConnectionRequest}
\alias{InitConnectionRequest}
\title{InitConnectionRequest R6 class}
\description{
Represents the TL request `InitConnectionRequest`.

Represents a request to initialize a connection with the server.
This class holds connection metadata and the inner `query` object to be
serialized and sent. Optional `proxy` and `params` fields are included
based on flags during serialization.
}
\details{
Fields:
- api_id: integer (32-bit)
- device_model: character
- system_version: character
- app_version: character
- system_lang_code: character
- lang_pack: character
- lang_code: character
- query: TypeX (an object providing to_raw()/to_list() or a raw vector/character)
- proxy: optional TypeInputClientProxy (object with to_raw()/to_list(), raw, or character)
- params: optional TypeJSONValue (object with to_raw()/to_list(), raw, or character)

Methods:
- new(api_id, device_model, system_version, app_version, system_lang_code, lang_pack, lang_code, query, proxy = NULL, params = NULL)
- to_list(): return an R list representation.
- to_raw(): serialize to raw vector (bytes) in little endian as used in TL.

Note: string and object serialization is simplified (charToRaw, nested to_raw()). For
exact TL compact string encoding or precise integer widths replace with correct utilities.
Initialize an InitConnectionRequest

to_list will call nested object's to_list() if available.
Serialize to raw (bytes)


Writes constructor id 0xa95ecd c1 (bytes: 0xA9 0x5E 0xCD 0xC1),
then flags (4 bytes little-endian), api_id (4 bytes little-endian),
then simple string bytes for device_model, system_version, app_version,
system_lang_code, lang_pack, lang_code, then optional proxy and params bytes,
and finally nested query bytes.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-InitConnectionRequest-new}{\code{InitConnectionRequest$new()}}
\item \href{#method-InitConnectionRequest-to_list}{\code{InitConnectionRequest$to_list()}}
\item \href{#method-InitConnectionRequest-to_bytes}{\code{InitConnectionRequest$to_bytes()}}
\item \href{#method-InitConnectionRequest-clone}{\code{InitConnectionRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InitConnectionRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-InitConnectionRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InitConnectionRequest$new(
  api_id,
  device_model,
  system_version,
  app_version,
  system_lang_code,
  lang_pack,
  lang_code,
  query,
  proxy = NULL,
  params = NULL
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InitConnectionRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-InitConnectionRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InitConnectionRequest$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InitConnectionRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-InitConnectionRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InitConnectionRequest$to_bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InitConnectionRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-InitConnectionRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InitConnectionRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{Integer constructor identifier.}

\item{\code{SUBCLASS_OF_ID}}{Integer subclass identifier.}

\item{\code{api_id}}{Integer API identifier.}

\item{\code{device_model}}{Character device model string.}

\item{\code{system_version}}{Character operating system version string.}

\item{\code{app_version}}{Character application version string.}

\item{\code{system_lang_code}}{Character system language code.}

\item{\code{lang_pack}}{Character language pack.}

\item{\code{lang_code}}{Character user language code.}

\item{\code{query}}{Object representing the nested query; must implement `to_list` and `to_bytes`.}

\item{\code{proxy}}{Optional proxy object; must implement `to_list` and `to_bytes` when present.}

\item{\code{params}}{Optional params object; must implement `to_list` and `to_bytes` when present.
Initialize a new InitConnectionRequest

Creates a new instance and stores all provided metadata and nested objects.
`proxy` and `params` are optional and default to `NULL`.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-InitConnectionRequest-new}{\code{InitConnectionRequest$new()}}
\item \href{#method-InitConnectionRequest-to_list}{\code{InitConnectionRequest$to_list()}}
\item \href{#method-InitConnectionRequest-to_bytes}{\code{InitConnectionRequest$to_bytes()}}
\item \href{#method-InitConnectionRequest-clone}{\code{InitConnectionRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InitConnectionRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-InitConnectionRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InitConnectionRequest$new(
  api_id,
  device_model,
  system_version,
  app_version,
  system_lang_code,
  lang_pack,
  lang_code,
  query,
  proxy = NULL,
  params = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_id}}{Integer API identifier.}

\item{\code{device_model}}{Character device model string.}

\item{\code{system_version}}{Character operating system version string.}

\item{\code{app_version}}{Character application version string.}

\item{\code{system_lang_code}}{Character system language code.}

\item{\code{lang_pack}}{Character language pack.}

\item{\code{lang_code}}{Character user language code.}

\item{\code{query}}{Nested query object that responds to `to_bytes`.}

\item{\code{proxy}}{Optional proxy object.}

\item{\code{params}}{Optional params object.
Convert the request to a list

Produces a plain R list representation suitable for JSON or debugging.
Nested objects will be converted via their `to_list` method if available.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InitConnectionRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-InitConnectionRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InitConnectionRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List with keys matching the request structure.
Serialize the request to raw bytes

Produces a raw vector following the expected binary format:
- constructor id (4 bytes)
- flags (4 bytes) indicating presence of `proxy` and `params`
- `api_id` (4 bytes)
- serialized strings for device and locale metadata
- optional `proxy` and `params` bytes
- the nested `query` bytes

NOTE: This relies on `serialize_bytes()` for string fields and the
nested objects' `to_bytes()` methods to produce raw vectors.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InitConnectionRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-InitConnectionRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InitConnectionRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Raw vector with serialized request bytes.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InitConnectionRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-InitConnectionRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InitConnectionRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
