% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_stories.R
\name{EditStoryRequest}
\alias{EditStoryRequest}
\title{EditStoryRequest R6 class}
\description{
Request to edit an existing story. Depending on flags this may include media,
media areas, caption+entities (both must be provided together) and privacy rules.
Returns Updates.
}
\details{
Methods:
- initialize(peer, id, media = NULL, media_areas = NULL, caption = NULL, entities = NULL, privacy_rules = NULL)
- resolve(client, utils)
- to_list()
- to_bytes()
- from_reader(reader) (class)
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{EditStoryRequest}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-EditStoryRequest-new}{\code{EditStoryRequest$new()}}
\item \href{#method-EditStoryRequest-resolve}{\code{EditStoryRequest$resolve()}}
\item \href{#method-EditStoryRequest-to_list}{\code{EditStoryRequest$to_list()}}
\item \href{#method-EditStoryRequest-to_bytes}{\code{EditStoryRequest$to_bytes()}}
\item \href{#method-EditStoryRequest-clone}{\code{EditStoryRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EditStoryRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-EditStoryRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EditStoryRequest$new(
  peer,
  id,
  media = NULL,
  media_areas = NULL,
  caption = NULL,
  entities = NULL,
  privacy_rules = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{TypeInputPeer}

\item{\code{id}}{integer}

\item{\code{media}}{TypeInputMedia or NULL}

\item{\code{media_areas}}{list or NULL}

\item{\code{caption}}{character or NULL (must be provided together with entities)}

\item{\code{entities}}{list or NULL (must be provided together with caption)}

\item{\code{privacy_rules}}{list or NULL
Resolve peer/media references

Convert high-level references to input forms using client/utils.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EditStoryRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-EditStoryRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EditStoryRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{client with get_input_entity}

\item{\code{utils}}{utils with get_input_peer and get_input_media
Convert to list}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EditStoryRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-EditStoryRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EditStoryRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list
Serialize to raw TL bytes
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EditStoryRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-EditStoryRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EditStoryRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw
Read an EditStoryRequest instance from a reader

reader expected to implement: read_int(), tgread_object(), tgread_string()
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EditStoryRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-EditStoryRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EditStoryRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
