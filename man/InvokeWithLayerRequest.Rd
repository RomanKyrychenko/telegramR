% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R, R/requests.R
\name{InvokeWithLayerRequest}
\alias{InvokeWithLayerRequest}
\title{InvokeWithLayerRequest R6 class}
\description{
Represents the TL request `InvokeWithLayerRequest`.

R6 class representing a request that wraps a nested `query` and specifies
a protocol `layer`. The `layer` is an integer representing the API layer
to invoke the nested `query` under. The nested `query` must implement
`to_list()` and `to_bytes()`.
}
\details{
Fields:
- layer: integer (32-bit)
- query: TypeX (an object representing a TL query). May be an R6 TL object with to_raw()/to_list().

Methods:
- new(layer, query): create new instance.
- to_list(): return an R list representation.
- to_raw(): serialize to raw vector (bytes) in little endian as used in TL.


to_raw() writes the constructor id (0xda9b0d0d) in little-endian, then a 4-byte
integer for layer, then the nested query bytes. The nested query is expected to
provide a to_raw() method returning a raw vector, or to already be a raw vector.
If the query is a character, it will be converted using charToRaw().
Initialize an InvokeWithLayerRequest
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-InvokeWithLayerRequest-new}{\code{InvokeWithLayerRequest$new()}}
\item \href{#method-InvokeWithLayerRequest-to_list}{\code{InvokeWithLayerRequest$to_list()}}
\item \href{#method-InvokeWithLayerRequest-to_bytes}{\code{InvokeWithLayerRequest$to_bytes()}}
\item \href{#method-InvokeWithLayerRequest-clone}{\code{InvokeWithLayerRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithLayerRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithLayerRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithLayerRequest$new(layer, query)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithLayerRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithLayerRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithLayerRequest$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithLayerRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithLayerRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithLayerRequest$to_bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithLayerRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithLayerRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithLayerRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{Integer constructor identifier.}

\item{\code{SUBCLASS_OF_ID}}{Integer subclass identifier.}

\item{\code{layer}}{Integer API layer.}

\item{\code{query}}{Nested query object implementing `to_list` and `to_bytes`.
Initialize a new InvokeWithLayerRequest}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-InvokeWithLayerRequest-new}{\code{InvokeWithLayerRequest$new()}}
\item \href{#method-InvokeWithLayerRequest-to_list}{\code{InvokeWithLayerRequest$to_list()}}
\item \href{#method-InvokeWithLayerRequest-to_bytes}{\code{InvokeWithLayerRequest$to_bytes()}}
\item \href{#method-InvokeWithLayerRequest-clone}{\code{InvokeWithLayerRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithLayerRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithLayerRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithLayerRequest$new(layer, query)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{layer}}{Integer API layer to use for the nested query.}

\item{\code{query}}{Nested query object that responds to `to_list` and `to_bytes`.
Convert to list representation

Produces a plain R list suitable for debugging or JSON serialization.
If the nested `query` implements `to_list`, that representation will be used.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithLayerRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithLayerRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithLayerRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List with keys: `_`, `layer`, and `query`.
Serialize to raw bytes

Serialization order:
 - constructor id (4 bytes, little-endian)
 - `layer` as 4-byte little-endian integer
 - serialized nested `query` bytes (via `query$to_bytes()`)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithLayerRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithLayerRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithLayerRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Raw vector containing the serialized bytes of the request.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithLayerRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithLayerRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithLayerRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
