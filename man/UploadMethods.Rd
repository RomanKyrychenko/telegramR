% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uploads.R
\name{UploadMethods}
\alias{UploadMethods}
\title{TelegramClient class for file upload operations}
\description{
A class containing methods for uploading files to Telegram.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-UploadMethods-send_file}{\code{UploadMethods$send_file()}}
\item \href{#method-UploadMethods-upload_file}{\code{UploadMethods$upload_file()}}
\item \href{#method-UploadMethods-file_to_media}{\code{UploadMethods$file_to_media()}}
\item \href{#method-UploadMethods-resize_photo_if_needed}{\code{UploadMethods$resize_photo_if_needed()}}
\item \href{#method-UploadMethods-is_image}{\code{UploadMethods$is_image()}}
\item \href{#method-UploadMethods-get_appropriated_part_size}{\code{UploadMethods$get_appropriated_part_size()}}
\item \href{#method-UploadMethods-invoke}{\code{UploadMethods$invoke()}}
\item \href{#method-UploadMethods-clone}{\code{UploadMethods$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UploadMethods-send_file"></a>}}
\if{latex}{\out{\hypertarget{method-UploadMethods-send_file}{}}}
\subsection{Method \code{send_file()}}{
Sends a file to a specified entity.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UploadMethods$send_file(
  entity,
  file,
  caption = NULL,
  force_document = FALSE,
  file_size = NULL,
  progress_callback = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity to send the file to.}

\item{\code{file}}{The file to send (path, raw bytes, or URL).}

\item{\code{caption}}{Optional caption for the media.}

\item{\code{force_document}}{Whether to force sending the file as a document.}

\item{\code{file_size}}{Optional size of the file in bytes.}

\item{\code{progress_callback}}{Optional callback to track upload progress.}

\item{\code{...}}{Additional parameters.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the result of the operation.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UploadMethods-upload_file"></a>}}
\if{latex}{\out{\hypertarget{method-UploadMethods-upload_file}{}}}
\subsection{Method \code{upload_file()}}{
Uploads a file to Telegram's servers without sending it.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UploadMethods$upload_file(
  file,
  part_size_kb = NULL,
  file_size = NULL,
  progress_callback = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to upload.}

\item{\code{part_size_kb}}{The size of chunks in KB.}

\item{\code{file_size}}{Optional size of the file in bytes.}

\item{\code{progress_callback}}{Optional callback to track upload progress.}

\item{\code{...}}{Additional parameters.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A future object representing the uploaded file details.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UploadMethods-file_to_media"></a>}}
\if{latex}{\out{\hypertarget{method-UploadMethods-file_to_media}{}}}
\subsection{Method \code{file_to_media()}}{
Converts a file to a media format.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UploadMethods$file_to_media(
  file,
  force_document = FALSE,
  file_size = NULL,
  progress_callback = NULL,
  attributes = NULL,
  thumb = NULL,
  allow_cache = TRUE,
  voice_note = FALSE,
  video_note = FALSE,
  supports_streaming = FALSE,
  mime_type = NULL,
  as_image = NULL,
  ttl = NULL,
  nosound_video = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to convert.}

\item{\code{force_document}}{Whether to force sending the file as a document.}

\item{\code{file_size}}{Optional size of the file in bytes.}

\item{\code{progress_callback}}{Optional callback to track upload progress.}

\item{\code{attributes}}{Optional attributes for the media.}

\item{\code{thumb}}{Optional thumbnail for the media.}

\item{\code{allow_cache}}{Whether to allow caching of the media.}

\item{\code{...}}{Additional parameters.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list containing the file handle, media, and whether it is an image.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UploadMethods-resize_photo_if_needed"></a>}}
\if{latex}{\out{\hypertarget{method-UploadMethods-resize_photo_if_needed}{}}}
\subsection{Method \code{resize_photo_if_needed()}}{
Resizes a photo if needed to meet Telegram's requirements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UploadMethods$resize_photo_if_needed(
  file,
  is_image,
  width = 2560,
  height = 2560
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to resize.}

\item{\code{is_image}}{Whether the file is an image.}

\item{\code{width}}{The maximum width of the image.}

\item{\code{height}}{The maximum height of the image.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The resized file or the original file if no resizing is needed.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UploadMethods-is_image"></a>}}
\if{latex}{\out{\hypertarget{method-UploadMethods-is_image}{}}}
\subsection{Method \code{is_image()}}{
Checks if a file is an image.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UploadMethods$is_image(file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{The file to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if the file is an image, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UploadMethods-get_appropriated_part_size"></a>}}
\if{latex}{\out{\hypertarget{method-UploadMethods-get_appropriated_part_size}{}}}
\subsection{Method \code{get_appropriated_part_size()}}{
Determines the appropriate part size for file uploads.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UploadMethods$get_appropriated_part_size(file_size)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_size}}{The size of the file in bytes.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The part size in KB.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UploadMethods-invoke"></a>}}
\if{latex}{\out{\hypertarget{method-UploadMethods-invoke}{}}}
\subsection{Method \code{invoke()}}{
Invokes an API request.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UploadMethods$invoke(request)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{request}}{The request to invoke.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The result of the API call.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UploadMethods-clone"></a>}}
\if{latex}{\out{\hypertarget{method-UploadMethods-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UploadMethods$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
