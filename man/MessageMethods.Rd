% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/messages.R
\name{MessageMethods}
\alias{MessageMethods}
\title{MessageMethods R6 class}
\description{
MessageMethods R6 class

MessageMethods R6 class
}
\details{
High-level message operations (iterate, fetch, send, edit, delete, pin, etc.).
Acts as a mixin around a Telegram client instance provided at construction.
}
\section{Initialization}{

message_methods <- MessageMethods$new(client)
}

\keyword{Internal}
\keyword{helper}
\keyword{internal}
\keyword{pin/unpin}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MessageMethods-iter_messages}{\code{MessageMethods$iter_messages()}}
\item \href{#method-MessageMethods-get_messages}{\code{MessageMethods$get_messages()}}
\item \href{#method-MessageMethods-send_message}{\code{MessageMethods$send_message()}}
\item \href{#method-MessageMethods-forward_messages}{\code{MessageMethods$forward_messages()}}
\item \href{#method-MessageMethods-edit_message}{\code{MessageMethods$edit_message()}}
\item \href{#method-MessageMethods-delete_messages}{\code{MessageMethods$delete_messages()}}
\item \href{#method-MessageMethods-send_read_acknowledge}{\code{MessageMethods$send_read_acknowledge()}}
\item \href{#method-MessageMethods-pin_message}{\code{MessageMethods$pin_message()}}
\item \href{#method-MessageMethods-unpin_message}{\code{MessageMethods$unpin_message()}}
\item \href{#method-MessageMethods-clone}{\code{MessageMethods$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-iter_messages"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-iter_messages}{}}}
\subsection{Method \code{iter_messages()}}{
Iterate over messages

Iterator over the messages for the given chat. The default order is newest to oldest,
set reverse = TRUE to iterate oldest to newest.

If either search, filter or from_user are provided, server-side search will be used.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$iter_messages(
  entity,
  limit = NULL,
  offset_date = NULL,
  offset_id = 0L,
  max_id = 0L,
  min_id = 0L,
  add_offset = 0L,
  search = NULL,
  filter = NULL,
  from_user = NULL,
  wait_time = NULL,
  ids = NULL,
  reverse = FALSE,
  reply_to = NULL,
  scheduled = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Entity to retrieve the message history from (can be NULL for global search).}

\item{\code{limit}}{integer or NULL. Number of messages to retrieve; NULL fetches all.}

\item{\code{offset_date}}{POSIXct or Date. Only messages previous to this date are returned.}

\item{\code{offset_id}}{integer. Only messages previous to this id are returned.}

\item{\code{max_id}}{integer. Exclude messages with id >= this value.}

\item{\code{min_id}}{integer. Exclude messages with id <= this value.}

\item{\code{add_offset}}{integer. Additional message offset.}

\item{\code{search}}{character. Text query for server-side search.}

\item{\code{filter}}{A filter object or constructor for server-side filtering.}

\item{\code{from_user}}{Entity. Only messages from this user will be returned.}

\item{\code{wait_time}}{numeric. Seconds to sleep between requests to avoid flood waits.}

\item{\code{ids}}{integer or integer vector. If set, return these ids instead of iterating.}

\item{\code{reverse}}{logical. If TRUE, iterate oldest to newest.}

\item{\code{reply_to}}{integer. If set, iterate replies to this message id.}

\item{\code{scheduled}}{logical. If TRUE, return scheduled messages (ignores other params except entity).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An iterator-like object or list depending on implementation.
Get messages

Same as iter_messages(), but returns a collected list/vector.
If limit is missing, defaults to 1 unless both min_id and max_id are set.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-get_messages"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-get_messages}{}}}
\subsection{Method \code{get_messages()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$get_messages(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Passed through to iter_messages().}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of messages or a single message if ids is a scalar.
Send a message

Sends a message to the specified user, chat or channel. Supports text, media, buttons,
scheduling, and other options.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-send_message"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-send_message}{}}}
\subsection{Method \code{send_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$send_message(
  entity,
  message = "",
  reply_to = NULL,
  attributes = NULL,
  parse_mode = NULL,
  formatting_entities = NULL,
  link_preview = TRUE,
  file = NULL,
  thumb = NULL,
  force_document = FALSE,
  clear_draft = FALSE,
  buttons = NULL,
  silent = NULL,
  background = NULL,
  supports_streaming = FALSE,
  schedule = NULL,
  comment_to = NULL,
  nosound_video = NULL,
  send_as = NULL,
  message_effect_id = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Target entity.}

\item{\code{message}}{Text or message-like object.}

\item{\code{reply_to}}{Message id or message object to reply to.}

\item{\code{attributes}}{Optional media attributes.}

\item{\code{parse_mode}}{Parse mode for text (e.g., 'md', 'html'); NULL to disable.}

\item{\code{formatting_entities}}{Message entities; overrides parse_mode if provided.}

\item{\code{link_preview}}{logical. Whether to show link previews for URLs in text.}

\item{\code{file}}{File-like object or vector of file-like objects to send.}

\item{\code{thumb}}{Optional JPEG thumbnail for documents.}

\item{\code{force_document}}{logical. Force sending file as document.}

\item{\code{clear_draft}}{logical. Clear existing draft before sending.}

\item{\code{buttons}}{Inline or reply keyboard markup.}

\item{\code{silent}}{logical. Send without notification sounds.}

\item{\code{background}}{logical. Send in background.}

\item{\code{supports_streaming}}{logical. Mark video as streamable.}

\item{\code{schedule}}{POSIXct/Date. Schedule time.}

\item{\code{comment_to}}{Message id or message object to comment to (linked group).}

\item{\code{nosound_video}}{logical. Treat video without audio accordingly.}

\item{\code{send_as}}{Entity to send the message as (channels/chats).}

\item{\code{message_effect_id}}{integer. Effect id (private chats only).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The sent message object.
Forward messages

Forwards one or more messages to the specified entity.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-forward_messages"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-forward_messages}{}}}
\subsection{Method \code{forward_messages()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$forward_messages(
  entity,
  messages,
  from_peer = NULL,
  background = NULL,
  with_my_score = NULL,
  silent = NULL,
  as_album = NULL,
  schedule = NULL,
  drop_author = NULL,
  drop_media_captions = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Destination entity.}

\item{\code{messages}}{Message ids or message objects to forward.}

\item{\code{from_peer}}{Source entity if messages are ids.}

\item{\code{background}}{logical. Forward in background.}

\item{\code{with_my_score}}{logical. Include game score.}

\item{\code{silent}}{logical. No notification sounds.}

\item{\code{as_album}}{logical. Deprecated; no effect.}

\item{\code{schedule}}{POSIXct/Date. Schedule time.}

\item{\code{drop_author}}{logical. Forward without quoting original author.}

\item{\code{drop_media_captions}}{logical. Strip captions (requires drop_author = TRUE).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of forwarded message objects (or single if input wasn't a list).
Edit a message

Edits a message to change its text or media.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-edit_message"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-edit_message}{}}}
\subsection{Method \code{edit_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$edit_message(
  entity,
  message = NULL,
  text = NULL,
  parse_mode = NULL,
  attributes = NULL,
  formatting_entities = NULL,
  link_preview = TRUE,
  file = NULL,
  thumb = NULL,
  force_document = FALSE,
  buttons = NULL,
  supports_streaming = FALSE,
  schedule = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Chat entity or the message itself.}

\item{\code{message}}{Message id, message object, input message id, or new text if entity is a message.}

\item{\code{text}}{New text for the message (optional).}

\item{\code{parse_mode}}{Parse mode for text.}

\item{\code{attributes}}{Media attributes.}

\item{\code{formatting_entities}}{Explicit entities (overrides parse_mode).}

\item{\code{link_preview}}{logical. Whether to show link previews for URLs in text.}

\item{\code{file}}{File-like object to replace existing media.}

\item{\code{thumb}}{Optional JPEG thumbnail for documents.}

\item{\code{force_document}}{logical. Force sending file as document.}

\item{\code{buttons}}{Inline or reply keyboard markup.}

\item{\code{supports_streaming}}{logical. Mark video as streamable.}

\item{\code{schedule}}{POSIXct/Date. Schedule time.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The edited message (or logical for inline bot messages depending on API).
Delete messages

Deletes the given messages, optionally for everyone (revoke).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-delete_messages"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-delete_messages}{}}}
\subsection{Method \code{delete_messages()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$delete_messages(entity, message_ids, revoke = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Entity the messages belong to (may be NULL for some chats).}

\item{\code{message_ids}}{Integer id, vector of ids, or message objects.}

\item{\code{revoke}}{logical. If TRUE, delete for everyone where applicable.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of results (AffectedMessages per chunk) depending on API.
Send read acknowledge

Marks messages as read and optionally clears mentions/reactions.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-send_read_acknowledge"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-send_read_acknowledge}{}}}
\subsection{Method \code{send_read_acknowledge()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$send_read_acknowledge(
  entity,
  message = NULL,
  max_id = NULL,
  clear_mentions = FALSE,
  clear_reactions = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Target entity.}

\item{\code{message}}{Message or vector of messages to derive max_id when max_id is NULL.}

\item{\code{max_id}}{Integer max id up to which messages will be marked read.}

\item{\code{clear_mentions}}{logical. Clear mention badge.}

\item{\code{clear_reactions}}{logical. Clear reactions badge.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
logical indicating success depending on API.
Pin a message

Pins a message in a chat.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-pin_message"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-pin_message}{}}}
\subsection{Method \code{pin_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$pin_message(entity, message, notify = FALSE, pm_oneside = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Target entity.}

\item{\code{message}}{Message id or message object to pin; if NULL, unpins all.}

\item{\code{notify}}{logical. Notify members about the pin.}

\item{\code{pm_oneside}}{logical. Pin just for you in private chats (opposite of official by default).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API-dependent result or pinned service message.
Unpin a message

Unpins a message in a chat. If message is NULL, unpins all.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-unpin_message"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-unpin_message}{}}}
\subsection{Method \code{unpin_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$unpin_message(entity, message = NULL, notify = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{Target entity.}

\item{\code{message}}{Message id or message object to unpin; NULL to unpin all.}

\item{\code{notify}}{logical. Notify members about the unpin.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
API-dependent result.
Resolve comment target for sending comments (linked discussion)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MessageMethods-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MessageMethods-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MessageMethods$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
