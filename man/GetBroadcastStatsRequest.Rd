% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_stats.R
\name{GetBroadcastStatsRequest}
\alias{GetBroadcastStatsRequest}
\title{GetBroadcastStatsRequest}
\description{
GetBroadcastStatsRequest

GetBroadcastStatsRequest
}
\details{
R6 class representing a GetBroadcastStatsRequest TLRequest.
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{GetBroadcastStatsRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{integer constructor id}

\item{\code{SUBCLASS_OF_ID}}{integer subclass id}

\item{\code{channel}}{input channel object}

\item{\code{dark}}{logical; optional dark flag}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GetBroadcastStatsRequest-new}{\code{GetBroadcastStatsRequest$new()}}
\item \href{#method-GetBroadcastStatsRequest-resolve}{\code{GetBroadcastStatsRequest$resolve()}}
\item \href{#method-GetBroadcastStatsRequest-to_list}{\code{GetBroadcastStatsRequest$to_list()}}
\item \href{#method-GetBroadcastStatsRequest-to_bytes}{\code{GetBroadcastStatsRequest$to_bytes()}}
\item \href{#method-GetBroadcastStatsRequest-from_reader}{\code{GetBroadcastStatsRequest$from_reader()}}
\item \href{#method-GetBroadcastStatsRequest-clone}{\code{GetBroadcastStatsRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetBroadcastStatsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-GetBroadcastStatsRequest-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new GetBroadcastStatsRequest.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetBroadcastStatsRequest$new(channel, dark = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{channel}}{input channel object}

\item{\code{dark}}{logical; optional dark flag}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetBroadcastStatsRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-GetBroadcastStatsRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
Resolve input entities (expects client and utils helpers to exist)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetBroadcastStatsRequest$resolve(client)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{The client instance to resolve entities.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetBroadcastStatsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-GetBroadcastStatsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
Convert to a plain list (like to_dict)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetBroadcastStatsRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list representing the request.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetBroadcastStatsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-GetBroadcastStatsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
Serialize to raw bytes (relies on channel$to_bytes() and helper utils in parent)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetBroadcastStatsRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A raw vector representing the serialized request.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetBroadcastStatsRequest-from_reader"></a>}}
\if{latex}{\out{\hypertarget{method-GetBroadcastStatsRequest-from_reader}{}}}
\subsection{Method \code{from_reader()}}{
Create instance from a reader object (reader must provide read_int, tgread_object)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetBroadcastStatsRequest$from_reader(reader)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reader}}{A reader object to read the serialized data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of GetBroadcastStatsRequest.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetBroadcastStatsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GetBroadcastStatsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetBroadcastStatsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
