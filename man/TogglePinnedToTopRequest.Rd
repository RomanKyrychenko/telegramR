% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_stories.R
\docType{class}
\name{TogglePinnedToTopRequest}
\alias{TogglePinnedToTopRequest}
\title{TogglePinnedToTopRequest R6 class}
\format{
An R6 object inheriting from TLRequest (if available)
}
\usage{
TogglePinnedToTopRequest$new(peer, id)
}
\description{
Represents a TL request to toggle pinned-to-top state for stories.
}
\details{
Methods:
- initialize(peer, id): Create a new request.
- resolve(client, utils): Resolve peer references (synchronous style).
- to_list(): Convert object to a plain R list.
- to_bytes(): Serialize to raw TL bytes (expects peer to provide bytes method).
- from_reader(reader): Class-level method to read object from a reader.
Initialize TogglePinnedToTopRequest
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{TogglePinnedToTopRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{peer}}{TypeInputPeer input peer}

\item{\code{id}}{integer vector story ids}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TogglePinnedToTopRequest-new}{\code{TogglePinnedToTopRequest$new()}}
\item \href{#method-TogglePinnedToTopRequest-resolve}{\code{TogglePinnedToTopRequest$resolve()}}
\item \href{#method-TogglePinnedToTopRequest-to_list}{\code{TogglePinnedToTopRequest$to_list()}}
\item \href{#method-TogglePinnedToTopRequest-to_bytes}{\code{TogglePinnedToTopRequest$to_bytes()}}
\item \href{#method-TogglePinnedToTopRequest-clone}{\code{TogglePinnedToTopRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TogglePinnedToTopRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-TogglePinnedToTopRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TogglePinnedToTopRequest$new(peer, id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{TypeInputPeer}

\item{\code{id}}{integer vector of story ids
Resolve peer references

Convert high-level peer references to input peers using provided client/utils.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TogglePinnedToTopRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-TogglePinnedToTopRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TogglePinnedToTopRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{client object with get_input_entity method}

\item{\code{utils}}{utils object with get_input_peer method
Convert to list (similar to to_dict)

Prepare a pure R list representation suitable for inspection or JSON.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TogglePinnedToTopRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-TogglePinnedToTopRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TogglePinnedToTopRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list
Serialize to raw bytes

Produces a raw vector matching TL binary layout.
Expects helper serialization methods on peer (to_bytes/bytes/_bytes) and writeBin available.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TogglePinnedToTopRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-TogglePinnedToTopRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TogglePinnedToTopRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw
Read a TogglePinnedToTopRequest instance from a reader

reader is expected to implement: read_int(), tgread_object()
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TogglePinnedToTopRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TogglePinnedToTopRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TogglePinnedToTopRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
