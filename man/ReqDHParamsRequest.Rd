% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R, R/requests.R, R/tlobject.R
\name{ReqDHParamsRequest}
\alias{ReqDHParamsRequest}
\title{ReqDHParamsRequest R6 class}
\description{
Represents the TL request `ReqDHParamsRequest`.

R6 class representing a request for Diffie-Hellman parameters during
the key exchange phase. This request carries:
- `nonce` and `server_nonce`: 128-bit nonces used for the DH handshake,
- `p` and `q`: byte sequences containing prime parameters,
- `public_key_fingerprint`: 64-bit fingerprint of the server public key,
- `encrypted_data`: bytes with encrypted DH payload.

A class representing the `ReqDHParamsRequest` object. This class is used to handle
the serialization and deserialization of the `ReqDHParamsRequest` object.
}
\details{
Fields:
- nonce: numeric/integer 128-bit nonce (placeholder representation)
- server_nonce: numeric/integer 128-bit server nonce (placeholder)
- p: raw, bytes
- q: raw, bytes
- public_key_fingerprint: numeric/integer 64-bit
- encrypted_data: raw, bytes

Methods:
- new(nonce, server_nonce, p, q, public_key_fingerprint, encrypted_data): create new instance.
- to_list(): return an R list representation.
- to_raw(): serialize to raw vector (bytes) in little endian as used in TL.

Note: 128-bit integer handling is represented as numeric/double placeholders.
For precise 128-bit two's-complement behavior, use a big-integer library and
implement a precise serializer.
Initialize a ReqDHParamsRequest
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{ReqDHParamsRequest}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ReqDHParamsRequest-new}{\code{ReqDHParamsRequest$new()}}
\item \href{#method-ReqDHParamsRequest-to_dict}{\code{ReqDHParamsRequest$to_dict()}}
\item \href{#method-ReqDHParamsRequest-.bytes}{\code{ReqDHParamsRequest$.bytes()}}
\item \href{#method-ReqDHParamsRequest-clone}{\code{ReqDHParamsRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="resolve"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-resolve'><code>telegramR::TLRequest$resolve()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$new(
  nonce,
  server_nonce,
  p,
  q,
  public_key_fingerprint,
  encrypted_data
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$to_dict()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-.bytes"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-.bytes}{}}}
\subsection{Method \code{.bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$.bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{ReqDHParamsRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{Integer constructor identifier.}

\item{\code{SUBCLASS_OF_ID}}{Integer subclass identifier.}

\item{\code{nonce}}{128-bit client nonce.}

\item{\code{server_nonce}}{128-bit server nonce.}

\item{\code{p}}{Byte sequence for parameter \(p\).}

\item{\code{q}}{Byte sequence for parameter \(q\).}

\item{\code{public_key_fingerprint}}{64-bit fingerprint of the public key.}

\item{\code{encrypted_data}}{Encrypted payload bytes.
Initialize a new ReqDHParamsRequest}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ReqDHParamsRequest-new}{\code{ReqDHParamsRequest$new()}}
\item \href{#method-ReqDHParamsRequest-to_dict}{\code{ReqDHParamsRequest$to_dict()}}
\item \href{#method-ReqDHParamsRequest-.bytes}{\code{ReqDHParamsRequest$.bytes()}}
\item \href{#method-ReqDHParamsRequest-clone}{\code{ReqDHParamsRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="resolve"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-resolve'><code>telegramR::TLRequest$resolve()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$new(
  nonce,
  server_nonce,
  p,
  q,
  public_key_fingerprint,
  encrypted_data
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$to_dict()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-.bytes"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-.bytes}{}}}
\subsection{Method \code{.bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$.bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{ReqDHParamsRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{A unique identifier for the TL object.}

\item{\code{SUBCLASS_OF_ID}}{A unique identifier for the subclass of the TL object.}

\item{\code{nonce}}{The `nonce` value as an integer.}

\item{\code{server_nonce}}{The `server_nonce` value as an integer.}

\item{\code{p}}{The `p` value as a raw vector.}

\item{\code{q}}{The `q` value as a raw vector.}

\item{\code{public_key_fingerprint}}{The `public_key_fingerprint` value as an integer.}

\item{\code{encrypted_data}}{The `encrypted_data` value as a raw vector.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ReqDHParamsRequest-new}{\code{ReqDHParamsRequest$new()}}
\item \href{#method-ReqDHParamsRequest-to_dict}{\code{ReqDHParamsRequest$to_dict()}}
\item \href{#method-ReqDHParamsRequest-.bytes}{\code{ReqDHParamsRequest$.bytes()}}
\item \href{#method-ReqDHParamsRequest-clone}{\code{ReqDHParamsRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="resolve"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-resolve'><code>telegramR::TLRequest$resolve()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new `ReqDHParamsRequest` object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$new(
  nonce,
  server_nonce,
  p,
  q,
  public_key_fingerprint,
  encrypted_data
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nonce}}{The `nonce` value as an integer.}

\item{\code{server_nonce}}{The `server_nonce` value as an integer.}

\item{\code{p}}{The `p` value as a raw vector.}

\item{\code{q}}{The `q` value as a raw vector.}

\item{\code{public_key_fingerprint}}{The `public_key_fingerprint` value as an integer.}

\item{\code{encrypted_data}}{The `encrypted_data` value as a raw vector.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
Convert the object to a dictionary representation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$to_dict()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list representing the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-.bytes"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-.bytes}{}}}
\subsection{Method \code{.bytes()}}{
Serialize the object to a byte array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$.bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A raw vector representing the serialized object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
