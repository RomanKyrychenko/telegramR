% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tlobject.R, R/functions.R, R/requests.R
\name{ReqDHParamsRequest}
\alias{ReqDHParamsRequest}
\title{ReqDHParamsRequest Class}
\description{
A class representing the `ReqDHParamsRequest` object. This class is used to handle
the serialization and deserialization of the `ReqDHParamsRequest` object.

Represents the TL request `ReqDHParamsRequest`.
}
\details{
Fields:
- nonce: numeric/integer 128-bit nonce (placeholder representation)
- server_nonce: numeric/integer 128-bit server nonce (placeholder)
- p: raw, bytes
- q: raw, bytes
- public_key_fingerprint: numeric/integer 64-bit
- encrypted_data: raw, bytes

Methods:
- new(nonce, server_nonce, p, q, public_key_fingerprint, encrypted_data): create new instance.
- to_list(): return an R list representation.
- to_raw(): serialize to raw vector (bytes) in little endian as used in TL.

Note: 128-bit integer handling is represented as numeric/double placeholders.
For precise 128-bit two's-complement behavior, use a big-integer library and
implement a precise serializer.
Initialize a ReqDHParamsRequest

R6 class representing a request for Diffie-Hellman parameters during
the key exchange phase. This request carries:
- `nonce` and `server_nonce`: 128-bit nonces used for the DH handshake,
- `p` and `q`: byte sequences containing prime parameters,
- `public_key_fingerprint`: 64-bit fingerprint of the server public key,
- `encrypted_data`: bytes with encrypted DH payload.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{A unique identifier for the TL object.}

\item{\code{SUBCLASS_OF_ID}}{A unique identifier for the subclass of the TL object.}

\item{\code{nonce}}{The `nonce` value as an integer.}

\item{\code{server_nonce}}{The `server_nonce` value as an integer.}

\item{\code{p}}{The `p` value as a raw vector.}

\item{\code{q}}{The `q` value as a raw vector.}

\item{\code{public_key_fingerprint}}{The `public_key_fingerprint` value as an integer.}

\item{\code{encrypted_data}}{The `encrypted_data` value as a raw vector.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ReqDHParamsRequest-new}{\code{ReqDHParamsRequest$new()}}
\item \href{#method-ReqDHParamsRequest-to_list}{\code{ReqDHParamsRequest$to_list()}}
\item \href{#method-ReqDHParamsRequest-to_bytes}{\code{ReqDHParamsRequest$to_bytes()}}
\item \href{#method-ReqDHParamsRequest-clone}{\code{ReqDHParamsRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$new(
  nonce,
  server_nonce,
  p,
  q,
  public_key_fingerprint,
  encrypted_data
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$to_bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ReqDHParamsRequest-new}{\code{ReqDHParamsRequest$new()}}
\item \href{#method-ReqDHParamsRequest-to_list}{\code{ReqDHParamsRequest$to_list()}}
\item \href{#method-ReqDHParamsRequest-to_bytes}{\code{ReqDHParamsRequest$to_bytes()}}
\item \href{#method-ReqDHParamsRequest-clone}{\code{ReqDHParamsRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$new(
  nonce,
  server_nonce,
  p,
  q,
  public_key_fingerprint,
  encrypted_data
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$to_bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{Integer constructor identifier.}

\item{\code{SUBCLASS_OF_ID}}{Integer subclass identifier.}

\item{\code{nonce}}{128-bit client nonce.}

\item{\code{server_nonce}}{128-bit server nonce.}

\item{\code{p}}{Byte sequence for parameter \(p\).}

\item{\code{q}}{Byte sequence for parameter \(q\).}

\item{\code{public_key_fingerprint}}{64-bit fingerprint of the public key.}

\item{\code{encrypted_data}}{Encrypted payload bytes.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ReqDHParamsRequest-new}{\code{ReqDHParamsRequest$new()}}
\item \href{#method-ReqDHParamsRequest-to_list}{\code{ReqDHParamsRequest$to_list()}}
\item \href{#method-ReqDHParamsRequest-to_bytes}{\code{ReqDHParamsRequest$to_bytes()}}
\item \href{#method-ReqDHParamsRequest-clone}{\code{ReqDHParamsRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new ReqDHParamsRequest
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$new(
  nonce,
  server_nonce,
  p,
  q,
  public_key_fingerprint,
  encrypted_data
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nonce}}{128-bit nonce generated by the client (large int or raw).}

\item{\code{server_nonce}}{128-bit nonce returned by the server (large int or raw).}

\item{\code{p}}{Byte sequence for the DH parameter p.}

\item{\code{q}}{Byte sequence for the DH parameter q.}

\item{\code{public_key_fingerprint}}{64-bit integer fingerprint for the public key.}

\item{\code{encrypted_data}}{Encrypted byte payload required for the DH exchange.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
Convert to list representation
Returns a plain R list that mirrors the fields of the request. Useful for
debugging, inspection or JSON-style representations.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List with keys: \code{"_"}, \code{nonce}, \code{server_nonce}, \code{p}, \code{q}, \code{public_key_fingerprint}, \code{encrypted_data}.
Serialize to raw bytes

Serializes the request into a raw vector according to the protocol:
- constructor id (4 bytes, little-endian)
- \code{nonce} and \code{server_nonce} as 128-bit values
- serialized \code{p} and \code{q} byte sequences
- \code{public_key_fingerprint} as 8-byte little-endian integer
- serialized \code{encrypted_data}

Note: the implementation relies on \code{serialize_bytes()} for byte
sequence fields and uses \code{writeBin()} for integer encodings.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$to_bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ReqDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ReqDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ReqDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
