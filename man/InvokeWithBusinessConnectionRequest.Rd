% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/requests.R
\name{InvokeWithBusinessConnectionRequest}
\alias{InvokeWithBusinessConnectionRequest}
\title{InvokeWithBusinessConnectionRequest}
\description{
R6 class representing a request that wraps a nested `query` with a business
connection identifier. The `connection_id` is typically a string used to
identify a business connection context; `query` is a nested object that must
implement `to_list()` and `to_bytes()`.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{Integer constructor identifier for this request type.}

\item{\code{SUBCLASS_OF_ID}}{Integer subclass identifier.}

\item{\code{connection_id}}{Character or raw connection identifier.}

\item{\code{query}}{Nested query object implementing `to_list` and `to_bytes`.
Initialize a new InvokeWithBusinessConnectionRequest}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-InvokeWithBusinessConnectionRequest-new}{\code{InvokeWithBusinessConnectionRequest$new()}}
\item \href{#method-InvokeWithBusinessConnectionRequest-to_list}{\code{InvokeWithBusinessConnectionRequest$to_list()}}
\item \href{#method-InvokeWithBusinessConnectionRequest-to_bytes}{\code{InvokeWithBusinessConnectionRequest$to_bytes()}}
\item \href{#method-InvokeWithBusinessConnectionRequest-clone}{\code{InvokeWithBusinessConnectionRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithBusinessConnectionRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithBusinessConnectionRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithBusinessConnectionRequest$new(connection_id, query)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{connection_id}}{Connection identifier (character or raw).}

\item{\code{query}}{Nested query object that responds to `to_list` and `to_bytes`.
Convert the request to a list

Produces a plain R list representation suitable for debugging or JSON
serialization. If the nested `query` implements `to_list()`, that
representation will be used.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithBusinessConnectionRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithBusinessConnectionRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithBusinessConnectionRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List with keys `_`, `connection_id`, and `query`.
Serialize the request to raw bytes

The serialization order is:
 - constructor id (4 bytes, little-endian)
 - serialized `connection_id` (via `serialize_bytes()`)
 - serialized nested `query` bytes (via `query$to_bytes()`)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithBusinessConnectionRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithBusinessConnectionRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithBusinessConnectionRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Raw vector containing the serialized bytes of the request.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeWithBusinessConnectionRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeWithBusinessConnectionRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeWithBusinessConnectionRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
