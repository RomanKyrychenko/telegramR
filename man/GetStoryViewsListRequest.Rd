% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_stories.R
\name{GetStoryViewsListRequest}
\alias{GetStoryViewsListRequest}
\title{GetStoryViewsListRequest R6 class}
\description{
Request to get a list of story views with optional filters (just_contacts,
reactions_first, forwards_first, q). Returns a stories.StoryViewsList.
}
\details{
Methods:
- initialize(peer, id, offset, limit, just_contacts = NULL, reactions_first = NULL, forwards_first = NULL, q = NULL)
- resolve(client, utils)
- to_list()
- to_bytes()
- from_reader(reader) (class)
Initialize GetStoryViewsListRequest
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{GetStoryViewsListRequest}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GetStoryViewsListRequest-new}{\code{GetStoryViewsListRequest$new()}}
\item \href{#method-GetStoryViewsListRequest-resolve}{\code{GetStoryViewsListRequest$resolve()}}
\item \href{#method-GetStoryViewsListRequest-to_list}{\code{GetStoryViewsListRequest$to_list()}}
\item \href{#method-GetStoryViewsListRequest-to_bytes}{\code{GetStoryViewsListRequest$to_bytes()}}
\item \href{#method-GetStoryViewsListRequest-clone}{\code{GetStoryViewsListRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStoryViewsListRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-GetStoryViewsListRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetStoryViewsListRequest$new(
  peer,
  id,
  offset,
  limit,
  just_contacts = NULL,
  reactions_first = NULL,
  forwards_first = NULL,
  q = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{TypeInputPeer}

\item{\code{id}}{integer story id}

\item{\code{offset}}{character offset cursor}

\item{\code{limit}}{integer limit}

\item{\code{just_contacts}}{logical or NULL}

\item{\code{reactions_first}}{logical or NULL}

\item{\code{forwards_first}}{logical or NULL}

\item{\code{q}}{character or NULL search query
Resolve peer references}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStoryViewsListRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-GetStoryViewsListRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetStoryViewsListRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{client with get_input_entity}

\item{\code{utils}}{utils with get_input_peer
Convert to list}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStoryViewsListRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-GetStoryViewsListRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetStoryViewsListRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list
Serialize to raw TL bytes
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStoryViewsListRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-GetStoryViewsListRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetStoryViewsListRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw
Read a GetStoryViewsListRequest instance from a reader

reader expected to implement: read_int(), tgread_object(), tgread_string()
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetStoryViewsListRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GetStoryViewsListRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetStoryViewsListRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
