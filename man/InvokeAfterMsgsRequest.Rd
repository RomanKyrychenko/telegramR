% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R, R/requests.R
\name{InvokeAfterMsgsRequest}
\alias{InvokeAfterMsgsRequest}
\title{InvokeAfterMsgsRequest R6 class}
\description{
Represents the TL request `InvokeAfterMsgsRequest`.

R6 class representing a request to invoke a nested `query` after a collection
of message identifiers (`msg_ids`). The class serializes the list of message
ids and appends the serialized nested `query` bytes.
}
\details{
Fields:
- msg_ids: numeric/integer vector (64-bit ids; numeric placeholders are used)
- query: TypeX (an object representing a TL query). May be an R6 TL object with to_raw()/to_list().

Methods:
- new(msg_ids, query): create new instance.
- to_list(): return an R list representation.
- to_raw(): serialize to raw vector (bytes) in little endian as used in TL.


to_raw() writes the constructor id (0x3dc4b4f0) in little-endian, then the TL-vector
constructor id (0x1cb5c415) and the vector length, then each msg_id as 8-byte
little-endian values, followed by nested query bytes.
Initialize an InvokeAfterMsgsRequest
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-InvokeAfterMsgsRequest-new}{\code{InvokeAfterMsgsRequest$new()}}
\item \href{#method-InvokeAfterMsgsRequest-to_list}{\code{InvokeAfterMsgsRequest$to_list()}}
\item \href{#method-InvokeAfterMsgsRequest-to_bytes}{\code{InvokeAfterMsgsRequest$to_bytes()}}
\item \href{#method-InvokeAfterMsgsRequest-clone}{\code{InvokeAfterMsgsRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeAfterMsgsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeAfterMsgsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeAfterMsgsRequest$new(msg_ids, query)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeAfterMsgsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeAfterMsgsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeAfterMsgsRequest$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeAfterMsgsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeAfterMsgsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeAfterMsgsRequest$to_bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeAfterMsgsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeAfterMsgsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeAfterMsgsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{Integer constructor identifier for the request.}

\item{\code{SUBCLASS_OF_ID}}{Integer subclass identifier for the request.}

\item{\code{msg_ids}}{A list of message identifiers (typically integer64 values).}

\item{\code{query}}{Nested query object; must implement `to_list` and `to_bytes`.
Initialize a new InvokeAfterMsgsRequest}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-InvokeAfterMsgsRequest-new}{\code{InvokeAfterMsgsRequest$new()}}
\item \href{#method-InvokeAfterMsgsRequest-to_list}{\code{InvokeAfterMsgsRequest$to_list()}}
\item \href{#method-InvokeAfterMsgsRequest-to_bytes}{\code{InvokeAfterMsgsRequest$to_bytes()}}
\item \href{#method-InvokeAfterMsgsRequest-clone}{\code{InvokeAfterMsgsRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeAfterMsgsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeAfterMsgsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeAfterMsgsRequest$new(msg_ids, query)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msg_ids}}{A list (or vector) of message identifiers to wait for.}

\item{\code{query}}{Nested query object that responds to `to_list` and `to_bytes`.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `InvokeAfterMsgsRequest` instance.
Convert to list representation

Produces a plain R list for debugging or JSON serialization. Ensures
`msg_ids` is represented as an empty list when `NULL`. If `query`
implements `to_list` that representation is used.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeAfterMsgsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeAfterMsgsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeAfterMsgsRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List with keys: `_`, `msg_ids`, and `query`.
Serialize to raw bytes

Serializes the request into a raw vector containing:
- constructor id (4 bytes little-endian),
- vector constructor marker (4 bytes) for the list of msg_ids,
- number of `msg_ids` (4 bytes little-endian),
- each `msg_id` as 8-byte little-endian integer,
- followed by the nested `query` bytes.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeAfterMsgsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeAfterMsgsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeAfterMsgsRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Raw vector with serialized request bytes.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InvokeAfterMsgsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-InvokeAfterMsgsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InvokeAfterMsgsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
