% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chats.R
\name{.ChatAction}
\alias{.ChatAction}
\title{_ChatAction R6 Class}
\description{
_ChatAction R6 Class

_ChatAction R6 Class
}
\details{
A context manager-like class for representing a "chat action" in Telegram,
such as "user is typing" or uploading a file with progress.
This class handles sending the appropriate action to the chat and optionally
cancelling it when done. It is designed to be used synchronously in R.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{client}}{The TelegramClient instance.}

\item{\code{chat}}{The chat entity where the action is shown.}

\item{\code{action}}{The action object (e.g., SendMessageTypingAction).}

\item{\code{delay}}{The delay in seconds between sending actions (not used in synchronous version).}

\item{\code{auto_cancel}}{Whether to cancel the action automatically on exit.}

\item{\code{request}}{The current request object for setting the action.}

\item{\code{running}}{Whether the action is currently running.}

\item{\code{_str_mapping}}{A named list mapping string action names to SendMessageAction objects.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{client}}{The TelegramClient instance.}

\item{\code{chat}}{The chat entity where the action is shown.}

\item{\code{action}}{The action object (e.g., SendMessageTypingAction).}

\item{\code{delay}}{The delay in seconds between sending actions (not used in synchronous version).}

\item{\code{auto_cancel}}{Whether to cancel the action automatically on exit.}

\item{\code{request}}{The current request object for setting the action.}

\item{\code{running}}{Whether the action is currently running.}

\item{\code{_str_mapping}}{A named list mapping string action names to SendMessageAction objects.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-_ChatAction-new}{\code{.ChatAction$new()}}
\item \href{#method-_ChatAction-enter}{\code{.ChatAction$enter()}}
\item \href{#method-_ChatAction-exit}{\code{.ChatAction$exit()}}
\item \href{#method-_ChatAction-progress}{\code{.ChatAction$progress()}}
\item \href{#method-_ChatAction-clone}{\code{.ChatAction$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-_ChatAction-new"></a>}}
\if{latex}{\out{\hypertarget{method-_ChatAction-new}{}}}
\subsection{Method \code{new()}}{
Initialize the _ChatAction object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{.ChatAction$new(client, chat, action, delay = 4, auto_cancel = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{The TelegramClient instance.}

\item{\code{chat}}{The chat entity.}

\item{\code{action}}{The action to show (string or SendMessageAction object).}

\item{\code{delay}}{The delay in seconds (reserved for future async implementation).}

\item{\code{auto_cancel}}{Whether to auto-cancel on exit.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-_ChatAction-enter"></a>}}
\if{latex}{\out{\hypertarget{method-_ChatAction-enter}{}}}
\subsection{Method \code{enter()}}{
Enter the context (start the action).
Sends the initial action request to the chat.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{.ChatAction$enter()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-_ChatAction-exit"></a>}}
\if{latex}{\out{\hypertarget{method-_ChatAction-exit}{}}}
\subsection{Method \code{exit()}}{
Exit the context (stop the action).
Cancels the action if auto_cancel is TRUE.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{.ChatAction$exit(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Ignored (for compatibility with context managers).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-_ChatAction-progress"></a>}}
\if{latex}{\out{\hypertarget{method-_ChatAction-progress}{}}}
\subsection{Method \code{progress()}}{
Update the progress of the action (for upload actions).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{.ChatAction$progress(current, total)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{current}}{The current progress value.}

\item{\code{total}}{The total progress value.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-_ChatAction-clone"></a>}}
\if{latex}{\out{\hypertarget{method-_ChatAction-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{.ChatAction$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
