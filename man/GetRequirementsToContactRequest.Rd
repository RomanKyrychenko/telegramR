% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_users.R
\name{GetRequirementsToContactRequest}
\alias{GetRequirementsToContactRequest}
\title{GetRequirementsToContactRequest}
\description{
R6 request class to obtain a vector of RequirementToContact objects for multiple users. It serializes the request to Telegram TL bytes and can deserialize from a TL reader. The request resolves plain user references into TLInputUser objects before serialization.
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{GetRequirementsToContactRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{Integer. Unique constructor ID for this request (0xd89a83a3).}

\item{\code{SUBCLASS_OF_ID}}{Integer. Subclass (result) ID (0x322623c3).}

\item{\code{id}}{list. List of TLInputUser objects or values resolvable via get_input_user identifying target users.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GetRequirementsToContactRequest-new}{\code{GetRequirementsToContactRequest$new()}}
\item \href{#method-GetRequirementsToContactRequest-resolve}{\code{GetRequirementsToContactRequest$resolve()}}
\item \href{#method-GetRequirementsToContactRequest-to_dict}{\code{GetRequirementsToContactRequest$to_dict()}}
\item \href{#method-GetRequirementsToContactRequest-.bytes}{\code{GetRequirementsToContactRequest$.bytes()}}
\item \href{#method-GetRequirementsToContactRequest-from_reader}{\code{GetRequirementsToContactRequest$from_reader()}}
\item \href{#method-GetRequirementsToContactRequest-clone}{\code{GetRequirementsToContactRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetRequirementsToContactRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-GetRequirementsToContactRequest-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new GetRequirementsToContactRequest.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetRequirementsToContactRequest$new(id = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{list|NULL List of user references (usernames, ids, TL objects) to be resolved to TLInputUser; NULL for an empty list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new GetRequirementsToContactRequest object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetRequirementsToContactRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-GetRequirementsToContactRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
Resolve plain user references in id to TLInputUser objects using the provided client/utilities.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetRequirementsToContactRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{An object exposing get_input_entity for resolving user references.}

\item{\code{utils}}{Auxiliary utilities object (not directly used but kept for parity with other requests).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL (modifies the object in place).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetRequirementsToContactRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-GetRequirementsToContactRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
Convert the request to a plain list (dictionary style) suitable for JSON/logging.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetRequirementsToContactRequest$to_dict()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list Representation with `_` discriminator and serialized id list.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetRequirementsToContactRequest-.bytes"></a>}}
\if{latex}{\out{\hypertarget{method-GetRequirementsToContactRequest-.bytes}{}}}
\subsection{Method \code{.bytes()}}{
Serialize the request into a raw vector of TL-encoded bytes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetRequirementsToContactRequest$.bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw Raw vector containing the TL serialization.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetRequirementsToContactRequest-from_reader"></a>}}
\if{latex}{\out{\hypertarget{method-GetRequirementsToContactRequest-from_reader}{}}}
\subsection{Method \code{from_reader()}}{
Deserialize a GetRequirementsToContactRequest from a TL reader.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetRequirementsToContactRequest$from_reader(reader)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reader}}{A TL reader object providing tgread_object(), read_int().}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
GetRequirementsToContactRequest A newly constructed request object populated from the reader.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GetRequirementsToContactRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GetRequirementsToContactRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GetRequirementsToContactRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
