% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_photos.R
\name{UpdateProfilePhotoRequest}
\alias{UpdateProfilePhotoRequest}
\title{UpdateProfilePhotoRequest}
\format{
A R6 object inheriting from TLRequest.
}
\description{
Represents a request to update a profile photo. Fields correspond to the TL
schema: id (input photo), fallback (optional logical), bot (optional input user).
}
\details{
R6 translation of the TLRequest UpdateProfilePhotoRequest.
}
\section{Methods}{

- new(id = NULL, fallback = NULL, bot = NULL):
  Create a new UpdateProfilePhotoRequest object.
- resolve(client, utils):
  Resolve references (convert provided id to input photo and bot to input user).
- to_list():
  Return a list representation suitable for JSON / introspection.
- to_bytes():
  Serialize the object to a raw vector (little-endian packing).
- from_reader(reader):
  Class method: read fields from a reader and construct an instance.
}

\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{UpdateProfilePhotoRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{integer}

\item{\code{SUBCLASS_OF_ID}}{integer}

\item{\code{id}}{TLObject or NULL}

\item{\code{fallback}}{logical or NULL}

\item{\code{bot}}{TLObject or NULL}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-UpdateProfilePhotoRequest-new}{\code{UpdateProfilePhotoRequest$new()}}
\item \href{#method-UpdateProfilePhotoRequest-resolve}{\code{UpdateProfilePhotoRequest$resolve()}}
\item \href{#method-UpdateProfilePhotoRequest-to_list}{\code{UpdateProfilePhotoRequest$to_list()}}
\item \href{#method-UpdateProfilePhotoRequest-to_bytes}{\code{UpdateProfilePhotoRequest$to_bytes()}}
\item \href{#method-UpdateProfilePhotoRequest-clone}{\code{UpdateProfilePhotoRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateProfilePhotoRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateProfilePhotoRequest-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new UpdateProfilePhotoRequest
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateProfilePhotoRequest$new(id = NULL, fallback = NULL, bot = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{TLObject or identifier for input photo}

\item{\code{fallback}}{logical or NULL}

\item{\code{bot}}{TLObject or identifier for input user or NULL}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateProfilePhotoRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateProfilePhotoRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
Resolve references (client + utils)

Convert provided id into an input photo and bot into an input user using client and utils.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateProfilePhotoRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{client with get_input_entity method}

\item{\code{utils}}{helper with get_input_photo and get_input_user methods}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateProfilePhotoRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateProfilePhotoRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
Convert object to a list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateProfilePhotoRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list representation of the request
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateProfilePhotoRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateProfilePhotoRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
Serialize to bytes (raw vector)

Packs constructor id, flags and present fields in little-endian order.
Relies on contained TLObject instances implementing to_bytes().
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateProfilePhotoRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-UpdateProfilePhotoRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-UpdateProfilePhotoRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UpdateProfilePhotoRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
