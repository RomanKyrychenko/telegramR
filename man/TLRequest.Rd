% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tlobject.R
\name{TLRequest}
\alias{TLRequest}
\title{TLRequest Class}
\description{
A class representing a Telegram Layer (TL) request. This class extends the `TLObject` class
and provides methods for reading results and resolving requests.
}
\section{Super class}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{TLRequest}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TLRequest-read_result}{\code{TLRequest$read_result()}}
\item \href{#method-TLRequest-resolve}{\code{TLRequest$resolve()}}
\item \href{#method-TLRequest-clone}{\code{TLRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="initialize"><a href='../../telegramR/html/TLObject.html#method-TLObject-initialize'><code>telegramR::TLObject$initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TLRequest-read_result"></a>}}
\if{latex}{\out{\hypertarget{method-TLRequest-read_result}{}}}
\subsection{Method \code{read_result()}}{
Read the result from a binary reader.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TLRequest$read_result(reader)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reader}}{A binary reader object to read the result from.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The result read from the binary reader.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TLRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-TLRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
Resolve the request using a client and utility functions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TLRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{A client object to resolve the request.}

\item{\code{utils}}{A utility object to assist in resolving the request.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The resolved result.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TLRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TLRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TLRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
