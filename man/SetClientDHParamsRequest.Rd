% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/requests.R, R/tlobject.R
\name{SetClientDHParamsRequest}
\alias{SetClientDHParamsRequest}
\title{SetClientDHParamsRequest R6 class}
\value{
An R6 object of class \code{SetClientDHParamsRequest}.
}
\description{
Represents the client's response during the Diffie-Hellman key exchange.
Contains the client's \code{nonce}, the server's \code{server_nonce}, and
the \code{encrypted_data} payload sent to the server for verification.

A class representing the `SetClientDHParamsRequest` object. This class is used to handle
the serialization and deserialization of the `SetClientDHParamsRequest` object.
}
\examples{
# req <- SetClientDHParamsRequest$new(nonce = some_large_int, server_nonce = other_large_int, encrypted_data = raw())
Initialize a new SetClientDHParamsRequest

}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{SetClientDHParamsRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{Integer constructor identifier for the request.}

\item{\code{SUBCLASS_OF_ID}}{Integer subclass identifier.}

\item{\code{nonce}}{128-bit client nonce (large integer or raw).}

\item{\code{server_nonce}}{128-bit server nonce (large integer or raw).}

\item{\code{encrypted_data}}{Raw or character vector containing encrypted payload bytes.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SetClientDHParamsRequest-new}{\code{SetClientDHParamsRequest$new()}}
\item \href{#method-SetClientDHParamsRequest-to_dict}{\code{SetClientDHParamsRequest$to_dict()}}
\item \href{#method-SetClientDHParamsRequest-.bytes}{\code{SetClientDHParamsRequest$.bytes()}}
\item \href{#method-SetClientDHParamsRequest-clone}{\code{SetClientDHParamsRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="resolve"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-resolve'><code>telegramR::TLRequest$resolve()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$new(nonce, server_nonce, encrypted_data)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$to_dict()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-.bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-.bytes}{}}}
\subsection{Method \code{.bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$.bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{SetClientDHParamsRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{A unique identifier for the TL object.}

\item{\code{SUBCLASS_OF_ID}}{A unique identifier for the subclass of the TL object.}

\item{\code{nonce}}{The `nonce` value as an integer.}

\item{\code{server_nonce}}{The `server_nonce` value as an integer.}

\item{\code{encrypted_data}}{The `encrypted_data` value as a raw vector.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SetClientDHParamsRequest-new}{\code{SetClientDHParamsRequest$new()}}
\item \href{#method-SetClientDHParamsRequest-to_dict}{\code{SetClientDHParamsRequest$to_dict()}}
\item \href{#method-SetClientDHParamsRequest-.bytes}{\code{SetClientDHParamsRequest$.bytes()}}
\item \href{#method-SetClientDHParamsRequest-clone}{\code{SetClientDHParamsRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="resolve"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-resolve'><code>telegramR::TLRequest$resolve()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new `SetClientDHParamsRequest` object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$new(nonce, server_nonce, encrypted_data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nonce}}{The `nonce` value as an integer.}

\item{\code{server_nonce}}{The `server_nonce` value as an integer.}

\item{\code{encrypted_data}}{The `encrypted_data` value as a raw vector.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
Convert the object to a dictionary representation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$to_dict()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list representing the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-.bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-.bytes}{}}}
\subsection{Method \code{.bytes()}}{
Serialize the object to a byte array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$.bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A raw vector representing the serialized object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
