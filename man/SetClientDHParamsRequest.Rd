% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tlobject.R, R/functions.R, R/requests.R
\name{SetClientDHParamsRequest}
\alias{SetClientDHParamsRequest}
\title{SetClientDHParamsRequest Class}
\value{
An R6 object of class \code{SetClientDHParamsRequest}.
}
\description{
A class representing the `SetClientDHParamsRequest` object. This class is used to handle
the serialization and deserialization of the `SetClientDHParamsRequest` object.

Methods:
- new(nonce, server_nonce, encrypted_data): create new instance.
- to_list(): return an R list representation.
- to_raw(): serialize to raw vector (bytes) in little endian as used in TL.
- from_reader(reader): class method, construct instance from a `reader` object
  that exposes `read_large_int(bits = 128)` and `tgread_bytes()`.

Note: 128-bit integer handling is represented here as numeric/double placeholders.
For precise 128-bit two's-complement behavior, use a big-integer library and
implement a precise serializer.

Initialize a SetClientDHParamsRequest

Represents the client's response during the Diffie-Hellman key exchange.
Contains the client's \code{nonce}, the server's \code{server_nonce}, and
the \code{encrypted_data} payload sent to the server for verification.
}
\details{
Represents the TL request `SetClientDHParamsRequest`.
}
\examples{
# req <- SetClientDHParamsRequest$new(nonce = some_large_int, server_nonce = other_large_int, encrypted_data = raw())
Initialize a new SetClientDHParamsRequest

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{A unique identifier for the TL object.}

\item{\code{SUBCLASS_OF_ID}}{A unique identifier for the subclass of the TL object.}

\item{\code{nonce}}{The `nonce` value as an integer.}

\item{\code{server_nonce}}{The `server_nonce` value as an integer.}

\item{\code{encrypted_data}}{The `encrypted_data` value as a raw vector.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SetClientDHParamsRequest-new}{\code{SetClientDHParamsRequest$new()}}
\item \href{#method-SetClientDHParamsRequest-to_list}{\code{SetClientDHParamsRequest$to_list()}}
\item \href{#method-SetClientDHParamsRequest-to_bytes}{\code{SetClientDHParamsRequest$to_bytes()}}
\item \href{#method-SetClientDHParamsRequest-clone}{\code{SetClientDHParamsRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$new(nonce, server_nonce, encrypted_data)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$to_bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{nonce}}{numeric/integer 128-bit nonce (may be represented as numeric)}

\item{\code{server_nonce}}{numeric/integer 128-bit server nonce}

\item{\code{encrypted_data}}{raw Encrypted data as raw bytes}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SetClientDHParamsRequest-new}{\code{SetClientDHParamsRequest$new()}}
\item \href{#method-SetClientDHParamsRequest-to_list}{\code{SetClientDHParamsRequest$to_list()}}
\item \href{#method-SetClientDHParamsRequest-to_bytes}{\code{SetClientDHParamsRequest$to_bytes()}}
\item \href{#method-SetClientDHParamsRequest-clone}{\code{SetClientDHParamsRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$new(nonce, server_nonce, encrypted_data)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$to_bytes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{Integer constructor identifier for the request.}

\item{\code{SUBCLASS_OF_ID}}{Integer subclass identifier.}

\item{\code{nonce}}{128-bit client nonce (large integer or raw).}

\item{\code{server_nonce}}{128-bit server nonce (large integer or raw).}

\item{\code{encrypted_data}}{Raw or character vector containing encrypted payload bytes.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SetClientDHParamsRequest-new}{\code{SetClientDHParamsRequest$new()}}
\item \href{#method-SetClientDHParamsRequest-to_list}{\code{SetClientDHParamsRequest$to_list()}}
\item \href{#method-SetClientDHParamsRequest-to_bytes}{\code{SetClientDHParamsRequest$to_bytes()}}
\item \href{#method-SetClientDHParamsRequest-clone}{\code{SetClientDHParamsRequest$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$new(nonce, server_nonce, encrypted_data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nonce}}{128-bit nonce generated by the client (large int or raw).}

\item{\code{server_nonce}}{128-bit nonce returned by the server (large int or raw).}

\item{\code{encrypted_data}}{Encrypted byte payload required for the DH exchange.
Convert to list representation

Returns a plain R list mirroring the object's fields. Useful for
debugging, inspection, or JSON-style representations.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List with keys: \code{"_"}, \code{nonce}, \code{server_nonce}, \code{encrypted_data}.
Serialize to raw bytes

Serializes the request into a raw vector according to the protocol:
- constructor id (4 bytes, little-endian)
- \code{nonce} and \code{server_nonce} as 16-byte little-endian values
- serialized \code{encrypted_data} via \code{serialize_bytes()}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Raw vector containing the serialized bytes of the request.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SetClientDHParamsRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SetClientDHParamsRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SetClientDHParamsRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
