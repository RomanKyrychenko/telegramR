% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_stories.R
\docType{class}
\name{SendStoryRequest}
\alias{SendStoryRequest}
\title{SendStoryRequest R6 class}
\format{
An R6 object inheriting from TLRequest
}
\usage{
SendStoryRequest$new(peer, media, privacy_rules, pinned = NULL, noforwards = NULL,
                            fwd_modified = NULL, media_areas = NULL, caption = NULL,
                            entities = NULL, random_id = NULL, period = NULL,
                            fwd_from_id = NULL, fwd_from_story = NULL, albums = NULL)
}
\description{
Represents a TL request to send a story.
}
\details{
Methods:
- initialize(...): create new request instance
- resolve(client, utils): resolve peer / forward references (synchronous style)
- to_list(): convert object to plain R list
- to_bytes(): serialize to raw TL bytes (expects peer/media/etc to provide a bytes method)
- from_reader(reader): class-level method to read instance from a reader
Initialize SendStoryRequest
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{SendStoryRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{peer}}{TypeInputPeer}

\item{\code{media}}{TypeInputMedia}

\item{\code{privacy_rules}}{list of TypeInputPrivacyRule}

\item{\code{pinned}}{logical}

\item{\code{noforwards}}{logical}

\item{\code{fwd_modified}}{logical}

\item{\code{media_areas}}{list of TypeMediaArea}

\item{\code{caption}}{character}

\item{\code{entities}}{list of TypeMessageEntity}

\item{\code{random_id}}{integer64-like random id (stored as numeric/int)}

\item{\code{period}}{integer}

\item{\code{fwd_from_id}}{TypeInputPeer}

\item{\code{fwd_from_story}}{integer}

\item{\code{albums}}{integer vector}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SendStoryRequest-new}{\code{SendStoryRequest$new()}}
\item \href{#method-SendStoryRequest-resolve}{\code{SendStoryRequest$resolve()}}
\item \href{#method-SendStoryRequest-to_list}{\code{SendStoryRequest$to_list()}}
\item \href{#method-SendStoryRequest-to_bytes}{\code{SendStoryRequest$to_bytes()}}
\item \href{#method-SendStoryRequest-clone}{\code{SendStoryRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_dict"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_dict'><code>telegramR::TLObject$to_dict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendStoryRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SendStoryRequest-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendStoryRequest$new(
  peer,
  media,
  privacy_rules,
  pinned = NULL,
  noforwards = NULL,
  fwd_modified = NULL,
  media_areas = NULL,
  caption = NULL,
  entities = NULL,
  random_id = NULL,
  period = NULL,
  fwd_from_id = NULL,
  fwd_from_story = NULL,
  albums = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{TypeInputPeer}

\item{\code{media}}{TypeInputMedia}

\item{\code{privacy_rules}}{list}

\item{\code{pinned}}{logical or NULL}

\item{\code{noforwards}}{logical or NULL}

\item{\code{fwd_modified}}{logical or NULL}

\item{\code{media_areas}}{list or NULL}

\item{\code{caption}}{character or NULL}

\item{\code{entities}}{list or NULL}

\item{\code{random_id}}{numeric/integer or NULL (auto-generated when NULL)}

\item{\code{period}}{integer or NULL}

\item{\code{fwd_from_id}}{TypeInputPeer or NULL}

\item{\code{fwd_from_story}}{integer or NULL}

\item{\code{albums}}{integer vector or NULL
Resolve peer and forward references}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendStoryRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-SendStoryRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendStoryRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{client object with get_input_entity}

\item{\code{utils}}{utils object with get_input_peer / get_input_media
Convert to list (similar to to_dict)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendStoryRequest-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-SendStoryRequest-to_list}{}}}
\subsection{Method \code{to_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendStoryRequest$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list
Serialize to raw bytes

Produces a raw vector matching TL binary layout for this request.
Expects helper serialization methods on peer/media/privacy_rules/media_areas/entities/fwd_from_id.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendStoryRequest-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SendStoryRequest-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendStoryRequest$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw
Read a SendStoryRequest instance from a reader

reader is expected to implement: read_int(), tgread_object(), tgread_string(), read_long()
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendStoryRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SendStoryRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendStoryRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
