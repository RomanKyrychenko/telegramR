% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/authkey.R
\name{AuthKey}
\alias{AuthKey}
\title{AuthKey Class}
\description{
Represents an authorization key, used to encrypt and decrypt
messages sent to Telegram's data centers.
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{active_key}}{Gets or sets the authorization key.}

\item{\code{return_aux_hash}}{Gets the auxiliary hash derived from the key.}

\item{\code{return_key_id}}{Gets the key identifier derived from the key.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-AuthKey-new}{\code{AuthKey$new()}}
\item \href{#method-AuthKey-calc_new_nonce_hash}{\code{AuthKey$calc_new_nonce_hash()}}
\item \href{#method-AuthKey-is_valid}{\code{AuthKey$is_valid()}}
\item \href{#method-AuthKey-equals}{\code{AuthKey$equals()}}
\item \href{#method-AuthKey-clone}{\code{AuthKey$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthKey-new"></a>}}
\if{latex}{\out{\hypertarget{method-AuthKey-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new authorization key.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthKey$new(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A raw vector representing the authorization key data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthKey-calc_new_nonce_hash"></a>}}
\if{latex}{\out{\hypertarget{method-AuthKey-calc_new_nonce_hash}{}}}
\subsection{Method \code{calc_new_nonce_hash()}}{
Calculates the new nonce hash based on the current attributes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthKey$calc_new_nonce_hash(new_nonce, number)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_nonce}}{A raw vector representing the new nonce.}

\item{\code{number}}{An integer to prepend before the hash.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An integer representing the hash for the given new nonce.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthKey-is_valid"></a>}}
\if{latex}{\out{\hypertarget{method-AuthKey-is_valid}{}}}
\subsection{Method \code{is_valid()}}{
Checks if the authorization key is valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthKey$is_valid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A logical value indicating whether the key is valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthKey-equals"></a>}}
\if{latex}{\out{\hypertarget{method-AuthKey-equals}{}}}
\subsection{Method \code{equals()}}{
Compares the current key with another key.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthKey$equals(other)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{other}}{An instance of AuthKey to compare with.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A logical value indicating whether the keys are equal.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AuthKey-clone"></a>}}
\if{latex}{\out{\hypertarget{method-AuthKey-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AuthKey$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
