% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gzippacked.R
\name{GzipPacked}
\alias{GzipPacked}
\title{R6 Class Representing GzipPacked}
\description{
Represents a Telegram API object that handles gzipped data.
}
\details{
This class provides methods to initialize, compress, decompress, serialize, and convert gzipped data to various formats.
}
\section{Super class}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{GzipPacked}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{data}}{\code{raw} The raw gzipped data.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GzipPacked-new}{\code{GzipPacked$new()}}
\item \href{#method-GzipPacked-gzip_if_smaller}{\code{GzipPacked$gzip_if_smaller()}}
\item \href{#method-GzipPacked-to_bytes}{\code{GzipPacked$to_bytes()}}
\item \href{#method-GzipPacked-read}{\code{GzipPacked$read()}}
\item \href{#method-GzipPacked-from_reader}{\code{GzipPacked$from_reader()}}
\item \href{#method-GzipPacked-to_dict}{\code{GzipPacked$to_dict()}}
\item \href{#method-GzipPacked-clone}{\code{GzipPacked$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GzipPacked-new"></a>}}
\if{latex}{\out{\hypertarget{method-GzipPacked-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new `GzipPacked` object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GzipPacked$new(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{\code{raw} The raw gzipped data.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GzipPacked-gzip_if_smaller"></a>}}
\if{latex}{\out{\hypertarget{method-GzipPacked-gzip_if_smaller}{}}}
\subsection{Method \code{gzip_if_smaller()}}{
Optionally gzip the data if it is content-related and smaller when compressed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GzipPacked$gzip_if_smaller(content_related, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{content_related}}{\code{logical} Whether the data is content-related.}

\item{\code{data}}{\code{raw} The data to be gzipped.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{raw} The gzipped data if smaller, otherwise the original data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GzipPacked-to_bytes"></a>}}
\if{latex}{\out{\hypertarget{method-GzipPacked-to_bytes}{}}}
\subsection{Method \code{to_bytes()}}{
Serialize the object to a byte array.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GzipPacked$to_bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{raw} A byte array representing the serialized object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GzipPacked-read"></a>}}
\if{latex}{\out{\hypertarget{method-GzipPacked-read}{}}}
\subsection{Method \code{read()}}{
Read and decompress the gzipped data from a binary reader.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GzipPacked$read(reader)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reader}}{A binary reader object.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{raw} The decompressed data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GzipPacked-from_reader"></a>}}
\if{latex}{\out{\hypertarget{method-GzipPacked-from_reader}{}}}
\subsection{Method \code{from_reader()}}{
Create a new `GzipPacked` object from a binary reader.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GzipPacked$from_reader(reader)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{reader}}{A binary reader object.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `GzipPacked` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GzipPacked-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-GzipPacked-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
Convert the object to a dictionary representation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GzipPacked$to_dict()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} A dictionary representation of the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GzipPacked-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GzipPacked-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GzipPacked$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
