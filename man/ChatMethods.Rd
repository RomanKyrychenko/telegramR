% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chats.R
\name{ChatMethods}
\alias{ChatMethods}
\title{ChatMethods R6 Class}
\description{
ChatMethods R6 Class

ChatMethods R6 Class
}
\details{
An R6 class providing methods for interacting with Telegram chats,
including iterating participants, admin logs, profile photos, and more.
This class is designed to be used within a TelegramClient context.
}
\examples{

## ------------------------------------------------
## Method `ChatMethods$iter_participants`
## ------------------------------------------------

# Show all user IDs in a chat
iter <- client$iter_participants(chat)
for (user in iter) {
  print(user$id)
}

# Search by name
iter <- client$iter_participants(chat, search = 'name')
for (user in iter) {
  print(user$username)
}

# Filter by admins
filter <- ChannelParticipantsAdmins()
iter <- client$iter_participants(chat, filter = filter)
for (user in iter) {
  print(user$first_name)
}

## ------------------------------------------------
## Method `ChatMethods$get_participants`
## ------------------------------------------------

users <- client$get_participants(chat)
print(users[[1]]$first_name)

for (user in users) {
  if (!is.null(user$username)) {
    print(user$username)
  }
}

## ------------------------------------------------
## Method `ChatMethods$iter_admin_log`
## ------------------------------------------------

iter <- client$iter_admin_log(channel)
for (event in iter) {
  if (event$changed_title) {
    print(paste('The title changed from', event$old, 'to', event$new))
  }
}

## ------------------------------------------------
## Method `ChatMethods$get_admin_log`
## ------------------------------------------------

# Get a list of deleted message events which said "heck"
events <- client$get_admin_log(channel, search = 'heck', delete = TRUE)
print(events[[1]]$old)

## ------------------------------------------------
## Method `ChatMethods$iter_profile_photos`
## ------------------------------------------------

# Download all the profile photos of some user
iter <- client$iter_profile_photos(user)
for (photo in iter) {
  client$download_media(photo)
}

## ------------------------------------------------
## Method `ChatMethods$get_profile_photos`
## ------------------------------------------------

# Get the photos of a channel
photos <- client$get_profile_photos(channel)
client$download_media(photos[[length(photos)]])

## ------------------------------------------------
## Method `ChatMethods$action`
## ------------------------------------------------

# Type for 2 seconds, then send a message
action <- client$action(chat, 'typing')
Sys.sleep(2)
client$send_message(chat, 'Hello world! I type slow ^^')

# Cancel any previous action
client$action(chat, 'cancel')

# Upload a document, showing its progress
action <- client$action(chat, 'document')
client$send_file(chat, zip_file, progress_callback = action$progress)

## ------------------------------------------------
## Method `ChatMethods$edit_admin`
## ------------------------------------------------

# Allowing user to pin messages in chat
client$edit_admin(chat, user, pin_messages = TRUE)

# Granting all permissions except for add_admins
client$edit_admin(chat, user, is_admin = TRUE, add_admins = FALSE)

## ------------------------------------------------
## Method `ChatMethods$edit_permissions`
## ------------------------------------------------

# Banning user from chat forever
client$edit_permissions(chat, user, view_messages = FALSE)

# Kicking someone (ban + un-ban)
client$edit_permissions(chat, user, view_messages = FALSE)
client$edit_permissions(chat, user)

## ------------------------------------------------
## Method `ChatMethods$kick_participant`
## ------------------------------------------------

# Kick some user from some chat, and deleting the service message
msg <- client$kick_participant(chat, user)
msg$delete()

# Leaving chat
client$kick_participant(chat, 'me')

## ------------------------------------------------
## Method `ChatMethods$get_permissions`
## ------------------------------------------------

permissions <- client$get_permissions(chat, user)
if (permissions$is_admin) {
  # do something
}

# Get Banned Permissions of Chat
client$get_permissions(chat)

## ------------------------------------------------
## Method `ChatMethods$get_stats`
## ------------------------------------------------

channel <- -100123
stats <- client$get_stats(channel)
print(paste('Stats from', stats$period$min_date, 'to', stats$period$max_date, ':'))
print(stats$stringify())
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{client}}{The TelegramClient instance.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{client}}{The TelegramClient instance.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ChatMethods-iter_participants}{\code{ChatMethods$iter_participants()}}
\item \href{#method-ChatMethods-get_participants}{\code{ChatMethods$get_participants()}}
\item \href{#method-ChatMethods-iter_admin_log}{\code{ChatMethods$iter_admin_log()}}
\item \href{#method-ChatMethods-get_admin_log}{\code{ChatMethods$get_admin_log()}}
\item \href{#method-ChatMethods-iter_profile_photos}{\code{ChatMethods$iter_profile_photos()}}
\item \href{#method-ChatMethods-get_profile_photos}{\code{ChatMethods$get_profile_photos()}}
\item \href{#method-ChatMethods-action}{\code{ChatMethods$action()}}
\item \href{#method-ChatMethods-edit_admin}{\code{ChatMethods$edit_admin()}}
\item \href{#method-ChatMethods-edit_permissions}{\code{ChatMethods$edit_permissions()}}
\item \href{#method-ChatMethods-kick_participant}{\code{ChatMethods$kick_participant()}}
\item \href{#method-ChatMethods-get_permissions}{\code{ChatMethods$get_permissions()}}
\item \href{#method-ChatMethods-get_stats}{\code{ChatMethods$get_stats()}}
\item \href{#method-ChatMethods-clone}{\code{ChatMethods$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-iter_participants"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-iter_participants}{}}}
\subsection{Method \code{iter_participants()}}{
Iterator over the participants belonging to the specified chat.

The order is unspecified.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$iter_participants(
  entity,
  limit = NULL,
  search = "",
  filter = NULL,
  aggressive = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity from which to retrieve the participants list.}

\item{\code{limit}}{Limits amount of participants fetched. Default is NULL.}

\item{\code{search}}{Look for participants with this string in name/username. Default is ''.}

\item{\code{filter}}{The filter to be used, if you want e.g. only admins. Default is NULL.}

\item{\code{aggressive}}{Does nothing. Kept for backwards-compatibility. Default is FALSE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A _ParticipantsIter object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Show all user IDs in a chat
iter <- client$iter_participants(chat)
for (user in iter) {
  print(user$id)
}

# Search by name
iter <- client$iter_participants(chat, search = 'name')
for (user in iter) {
  print(user$username)
}

# Filter by admins
filter <- ChannelParticipantsAdmins()
iter <- client$iter_participants(chat, filter = filter)
for (user in iter) {
  print(user$first_name)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-get_participants"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-get_participants}{}}}
\subsection{Method \code{get_participants()}}{
Same as iter_participants(), but returns a TotalList instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$get_participants(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed to iter_participants.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A TotalList of participants.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{users <- client$get_participants(chat)
print(users[[1]]$first_name)

for (user in users) {
  if (!is.null(user$username)) {
    print(user$username)
  }
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-iter_admin_log"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-iter_admin_log}{}}}
\subsection{Method \code{iter_admin_log()}}{
Iterator over the admin log for the specified channel.

The default order is from the most recent event to the oldest.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$iter_admin_log(
  entity,
  limit = NULL,
  max_id = 0,
  min_id = 0,
  search = NULL,
  admins = NULL,
  join = NULL,
  leave = NULL,
  invite = NULL,
  restrict = NULL,
  unrestrict = NULL,
  ban = NULL,
  unban = NULL,
  promote = NULL,
  demote = NULL,
  info = NULL,
  settings = NULL,
  pinned = NULL,
  edit = NULL,
  delete = NULL,
  group_call = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel entity from which to get its admin log.}

\item{\code{limit}}{Number of events to be retrieved. Default is NULL.}

\item{\code{max_id}}{All events with a higher (newer) ID or equal to this will be excluded. Default is 0.}

\item{\code{min_id}}{All events with a lower (older) ID or equal to this will be excluded. Default is 0.}

\item{\code{search}}{The string to be used as a search query. Default is NULL.}

\item{\code{admins}}{If present, filter by these admins. Default is NULL.}

\item{\code{join}}{If TRUE, events for when a user joined will be returned. Default is NULL.}

\item{\code{leave}}{If TRUE, events for when a user leaves will be returned. Default is NULL.}

\item{\code{invite}}{If TRUE, events for when a user joins through an invite link will be returned. Default is NULL.}

\item{\code{restrict}}{If TRUE, events with partial restrictions will be returned. Default is NULL.}

\item{\code{unrestrict}}{If TRUE, events removing restrictions will be returned. Default is NULL.}

\item{\code{ban}}{If TRUE, events applying or removing all restrictions will be returned. Default is NULL.}

\item{\code{unban}}{If TRUE, events removing all restrictions will be returned. Default is NULL.}

\item{\code{promote}}{If TRUE, events with admin promotions will be returned. Default is NULL.}

\item{\code{demote}}{If TRUE, events with admin demotions will be returned. Default is NULL.}

\item{\code{info}}{If TRUE, events changing the group info will be returned. Default is NULL.}

\item{\code{settings}}{If TRUE, events changing the group settings will be returned. Default is NULL.}

\item{\code{pinned}}{If TRUE, events of new pinned messages will be returned. Default is NULL.}

\item{\code{edit}}{If TRUE, events of message edits will be returned. Default is NULL.}

\item{\code{delete}}{If TRUE, events of message deletions will be returned. Default is NULL.}

\item{\code{group_call}}{If TRUE, events related to group calls will be returned. Default is NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An _AdminLogIter object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{iter <- client$iter_admin_log(channel)
for (event in iter) {
  if (event$changed_title) {
    print(paste('The title changed from', event$old, 'to', event$new))
  }
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-get_admin_log"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-get_admin_log}{}}}
\subsection{Method \code{get_admin_log()}}{
Same as iter_admin_log(), but returns a list instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$get_admin_log(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed to iter_admin_log.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of admin log events.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Get a list of deleted message events which said "heck"
events <- client$get_admin_log(channel, search = 'heck', delete = TRUE)
print(events[[1]]$old)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-iter_profile_photos"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-iter_profile_photos}{}}}
\subsection{Method \code{iter_profile_photos()}}{
Iterator over a user's profile photos or a chat's photos.

The order is from the most recent photo to the oldest.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$iter_profile_photos(entity, limit = NULL, offset = 0, max_id = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity from which to get the profile or chat photos.}

\item{\code{limit}}{Number of photos to be retrieved. Default is NULL.}

\item{\code{offset}}{How many photos should be skipped before returning the first one. Default is 0.}

\item{\code{max_id}}{The maximum ID allowed when fetching photos. Default is 0.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A _ProfilePhotoIter object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Download all the profile photos of some user
iter <- client$iter_profile_photos(user)
for (photo in iter) {
  client$download_media(photo)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-get_profile_photos"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-get_profile_photos}{}}}
\subsection{Method \code{get_profile_photos()}}{
Same as iter_profile_photos(), but returns a TotalList instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$get_profile_photos(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed to iter_profile_photos.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A TotalList of photos.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Get the photos of a channel
photos <- client$get_profile_photos(channel)
client$download_media(photos[[length(photos)]])
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-action"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-action}{}}}
\subsection{Method \code{action()}}{
Returns a context-manager object to represent a "chat action".

Chat actions indicate things like "user is typing", etc.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$action(entity, action, delay = 4, auto_cancel = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The entity where the action should be showed in.}

\item{\code{action}}{The action to show (string or SendMessageAction).}

\item{\code{delay}}{The delay in seconds between sending actions. Default is 4.}

\item{\code{auto_cancel}}{Whether to cancel the action automatically. Default is TRUE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A _ChatAction object or a coroutine.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Type for 2 seconds, then send a message
action <- client$action(chat, 'typing')
Sys.sleep(2)
client$send_message(chat, 'Hello world! I type slow ^^')

# Cancel any previous action
client$action(chat, 'cancel')

# Upload a document, showing its progress
action <- client$action(chat, 'document')
client$send_file(chat, zip_file, progress_callback = action$progress)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-edit_admin"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-edit_admin}{}}}
\subsection{Method \code{edit_admin()}}{
Edits admin permissions for someone in a chat.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$edit_admin(
  entity,
  user,
  change_info = NULL,
  post_messages = NULL,
  edit_messages = NULL,
  delete_messages = NULL,
  ban_users = NULL,
  invite_users = NULL,
  pin_messages = NULL,
  add_admins = NULL,
  manage_call = NULL,
  anonymous = NULL,
  is_admin = NULL,
  title = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel, megagroup or chat where the promotion should happen.}

\item{\code{user}}{The user to be promoted.}

\item{\code{change_info}}{Whether the user can change info. Default is NULL.}

\item{\code{post_messages}}{Whether the user can post in the channel. Default is NULL.}

\item{\code{edit_messages}}{Whether the user can edit messages. Default is NULL.}

\item{\code{delete_messages}}{Whether the user can delete messages. Default is NULL.}

\item{\code{ban_users}}{Whether the user can ban users. Default is NULL.}

\item{\code{invite_users}}{Whether the user can invite users. Default is NULL.}

\item{\code{pin_messages}}{Whether the user can pin messages. Default is NULL.}

\item{\code{add_admins}}{Whether the user can add admins. Default is NULL.}

\item{\code{manage_call}}{Whether the user can manage group calls. Default is NULL.}

\item{\code{anonymous}}{Whether the user remains anonymous. Default is NULL.}

\item{\code{is_admin}}{Whether the user is an admin. Default is NULL.}

\item{\code{title}}{The custom title for the admin. Default is NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The resulting Updates object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Allowing user to pin messages in chat
client$edit_admin(chat, user, pin_messages = TRUE)

# Granting all permissions except for add_admins
client$edit_admin(chat, user, is_admin = TRUE, add_admins = FALSE)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-edit_permissions"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-edit_permissions}{}}}
\subsection{Method \code{edit_permissions()}}{
Edits user restrictions in a chat.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$edit_permissions(
  entity,
  user = NULL,
  until_date = NULL,
  view_messages = TRUE,
  send_messages = TRUE,
  send_media = TRUE,
  send_stickers = TRUE,
  send_gifs = TRUE,
  send_games = TRUE,
  send_inline = TRUE,
  embed_link_previews = TRUE,
  send_polls = TRUE,
  change_info = TRUE,
  invite_users = TRUE,
  pin_messages = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel or megagroup where the restriction should happen.}

\item{\code{user}}{The user to restrict. Default is NULL.}

\item{\code{until_date}}{When the user will be unbanned. Default is NULL.}

\item{\code{view_messages}}{Whether the user can view messages. Default is TRUE.}

\item{\code{send_messages}}{Whether the user can send messages. Default is TRUE.}

\item{\code{send_media}}{Whether the user can send media. Default is TRUE.}

\item{\code{send_stickers}}{Whether the user can send stickers. Default is TRUE.}

\item{\code{send_gifs}}{Whether the user can send gifs. Default is TRUE.}

\item{\code{send_games}}{Whether the user can send games. Default is TRUE.}

\item{\code{send_inline}}{Whether the user can use inline bots. Default is TRUE.}

\item{\code{embed_link_previews}}{Whether the user can embed link previews. Default is TRUE.}

\item{\code{send_polls}}{Whether the user can send polls. Default is TRUE.}

\item{\code{change_info}}{Whether the user can change info. Default is TRUE.}

\item{\code{invite_users}}{Whether the user can invite users. Default is TRUE.}

\item{\code{pin_messages}}{Whether the user can pin messages. Default is TRUE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The resulting Updates object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Banning user from chat forever
client$edit_permissions(chat, user, view_messages = FALSE)

# Kicking someone (ban + un-ban)
client$edit_permissions(chat, user, view_messages = FALSE)
client$edit_permissions(chat, user)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-kick_participant"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-kick_participant}{}}}
\subsection{Method \code{kick_participant()}}{
Kicks a user from a chat.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$kick_participant(entity, user)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel or chat where the user should be kicked from.}

\item{\code{user}}{The user to kick.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The service message produced about a user being kicked, if any.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Kick some user from some chat, and deleting the service message
msg <- client$kick_participant(chat, user)
msg$delete()

# Leaving chat
client$kick_participant(chat, 'me')
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-get_permissions"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-get_permissions}{}}}
\subsection{Method \code{get_permissions()}}{
Fetches the permissions of a user in a specific chat or channel.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$get_permissions(entity, user = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel or chat the user is participant of.}

\item{\code{user}}{Target user. Default is NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ParticipantPermissions instance or NULL.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{permissions <- client$get_permissions(chat, user)
if (permissions$is_admin) {
  # do something
}

# Get Banned Permissions of Chat
client$get_permissions(chat)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-get_stats"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-get_stats}{}}}
\subsection{Method \code{get_stats()}}{
Retrieves statistics from the given megagroup or broadcast channel.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$get_stats(entity, message = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{entity}}{The channel from which to get statistics.}

\item{\code{message}}{The message ID from which to get statistics. Default is NULL.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
BroadcastStats, MegagroupStats, or MessageStats.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{channel <- -100123
stats <- client$get_stats(channel)
print(paste('Stats from', stats$period$min_date, 'to', stats$period$max_date, ':'))
print(stats$stringify())
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatMethods-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ChatMethods-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatMethods$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
