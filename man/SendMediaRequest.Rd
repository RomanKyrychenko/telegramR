% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_messages.R
\name{SendMediaRequest}
\alias{SendMediaRequest}
\title{SendMediaRequest}
\description{
Represents a request to send media. This class inherits from TLRequest.
}
\section{Super classes}{
\code{\link[telegramR:TLObject]{telegramR::TLObject}} -> \code{\link[telegramR:TLRequest]{telegramR::TLRequest}} -> \code{SendMediaRequest}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{CONSTRUCTOR_ID}}{The constructor ID for this request (0xac55d9c1).}

\item{\code{SUBCLASS_OF_ID}}{The subclass ID for this request (0x8af52aac).}

\item{\code{CONSTRUCTOR_ID}}{The constructor ID.}

\item{\code{SUBCLASS_OF_ID}}{The subclass ID.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SendMediaRequest-new}{\code{SendMediaRequest$new()}}
\item \href{#method-SendMediaRequest-resolve}{\code{SendMediaRequest$resolve()}}
\item \href{#method-SendMediaRequest-to_dict}{\code{SendMediaRequest$to_dict()}}
\item \href{#method-SendMediaRequest-bytes}{\code{SendMediaRequest$bytes()}}
\item \href{#method-SendMediaRequest-clone}{\code{SendMediaRequest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-.bytes'><code>telegramR::TLObject$.bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".eq"><a href='../../telegramR/html/TLObject.html#method-TLObject-.eq'><code>telegramR::TLObject$.eq()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".ne"><a href='../../telegramR/html/TLObject.html#method-TLObject-.ne'><code>telegramR::TLObject$.ne()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id=".str"><a href='../../telegramR/html/TLObject.html#method-TLObject-.str'><code>telegramR::TLObject$.str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="from_reader"><a href='../../telegramR/html/TLObject.html#method-TLObject-from_reader'><code>telegramR::TLObject$from_reader()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="pretty_format"><a href='../../telegramR/html/TLObject.html#method-TLObject-pretty_format'><code>telegramR::TLObject$pretty_format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_bytes"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_bytes'><code>telegramR::TLObject$serialize_bytes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="serialize_datetime"><a href='../../telegramR/html/TLObject.html#method-TLObject-serialize_datetime'><code>telegramR::TLObject$serialize_datetime()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="stringify"><a href='../../telegramR/html/TLObject.html#method-TLObject-stringify'><code>telegramR::TLObject$stringify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLObject" data-id="to_json"><a href='../../telegramR/html/TLObject.html#method-TLObject-to_json'><code>telegramR::TLObject$to_json()</code></a></span></li>
<li><span class="pkg-link" data-pkg="telegramR" data-topic="TLRequest" data-id="read_result"><a href='../../telegramR/html/TLRequest.html#method-TLRequest-read_result'><code>telegramR::TLRequest$read_result()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendMediaRequest-new"></a>}}
\if{latex}{\out{\hypertarget{method-SendMediaRequest-new}{}}}
\subsection{Method \code{new()}}{
Initialize the SendMediaRequest object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendMediaRequest$new(
  peer,
  media,
  message,
  silent = NULL,
  background = NULL,
  clear_draft = NULL,
  noforwards = NULL,
  update_stickersets_order = NULL,
  invert_media = NULL,
  allow_paid_floodskip = NULL,
  reply_to = NULL,
  random_id = NULL,
  reply_markup = NULL,
  entities = NULL,
  schedule_date = NULL,
  send_as = NULL,
  quick_reply_shortcut = NULL,
  effect = NULL,
  allow_paid_stars = NULL,
  suggested_post = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{peer}}{The input peer.}

\item{\code{media}}{The input media.}

\item{\code{message}}{The message string.}

\item{\code{silent}}{Optional silent flag.}

\item{\code{background}}{Optional background flag.}

\item{\code{clear_draft}}{Optional clear draft flag.}

\item{\code{noforwards}}{Optional no forwards flag.}

\item{\code{update_stickersets_order}}{Optional update stickersets order flag.}

\item{\code{invert_media}}{Optional invert media flag.}

\item{\code{allow_paid_floodskip}}{Optional allow paid floodskip flag.}

\item{\code{reply_to}}{Optional input reply to.}

\item{\code{random_id}}{Optional random ID, defaults to a generated 64-bit integer.}

\item{\code{reply_markup}}{Optional reply markup.}

\item{\code{entities}}{Optional list of message entities.}

\item{\code{schedule_date}}{Optional schedule date.}

\item{\code{send_as}}{Optional input peer to send as.}

\item{\code{quick_reply_shortcut}}{Optional input quick reply shortcut.}

\item{\code{effect}}{Optional effect ID.}

\item{\code{allow_paid_stars}}{Optional allow paid stars count.}

\item{\code{suggested_post}}{Optional suggested post.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendMediaRequest-resolve"></a>}}
\if{latex}{\out{\hypertarget{method-SendMediaRequest-resolve}{}}}
\subsection{Method \code{resolve()}}{
Resolve the request using client and utils.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendMediaRequest$resolve(client, utils)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{client}}{The client object.}

\item{\code{utils}}{The utils object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendMediaRequest-to_dict"></a>}}
\if{latex}{\out{\hypertarget{method-SendMediaRequest-to_dict}{}}}
\subsection{Method \code{to_dict()}}{
Convert the object to a dictionary.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendMediaRequest$to_dict()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list representing the object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendMediaRequest-bytes"></a>}}
\if{latex}{\out{\hypertarget{method-SendMediaRequest-bytes}{}}}
\subsection{Method \code{bytes()}}{
Serialize the object to bytes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendMediaRequest$bytes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A raw vector of bytes.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SendMediaRequest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SendMediaRequest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SendMediaRequest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
